var Dropdown=function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=n(2);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}n(3),n(7),n(8);var a=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"==typeof t){var i=document.querySelectorAll(t);if(0===i.length)return void console.error("Dropdown: Селектор "+t+" не найден!");if(i.length>1)for(var o=1;o<i.length;o++)new e(i[o],n)}this.config=(0,r.extend)({items:[],singleItem:!1,inputHiddenName:"dropdown",searchFields:["name"],searchPlaceholder:"Введите имя друга или email",noResultsText:"Пользователь не найден",serverSearch:{url:null,fields:[],paramNameQuery:"q",paramNameFields:"fields",loadingText:"Загрузка..."},classNames:{container:"dropdown",head:"dropdown__head",selectedList:"dropdown__selected",selectedItem:"dropdown__s-item",removeButton:"dropdown__remove-btn",addButton:"dropdown__add-button",input:"dropdown__input",arrow:"dropdown__arrow",list:"dropdown__list",listActive:"dropdown__list_active",listItem:"dropdown__item",listItemHighlight:"dropdown__item_hover",message:"dropdown__message"},templateListItem:function(e){return'\n          <div class="dropdown__item-inner">\n            <span class="dropdown__avatar">\n              <img class="dropdown__avatar-img" src="'+e.avatar+'">\n            </span>\n            \n            <span class="dropdown__name">'+e.name+"</span>\n          </div>\n        "},templateSelectedItem:function(e){return e.name},onInit:null,onDestroy:null,onShow:null,onHide:null,onSelect:null,onUnselect:null},n),this.element="string"==typeof t?document.querySelector(t):t,this.elements={},this.initialised=!1,this.selected=[],this._onClick=this._onClick.bind(this),this._onKeyDown=this._onKeyDown.bind(this),this._onFocus=this._onFocus.bind(this),this._onChange=this._onChange.bind(this),this._onMouseOver=this._onMouseOver.bind(this),this.init(this.config.init)}return i(e,[{key:"init",value:function(){!0!==this.initialised&&(this._initTemplates(),this._createTemplates(),this._render(),this._renderList(),this._addEventListeners(),this.initialised=!0,(0,r.runCallback)(this.config.onInit,this))}},{key:"destroy",value:function(){!1!==this.initialised&&(this.element.innerHTML="",this.elements=[],this.selected=[],this._removeEventListeners(),this.initialised=!1,(0,r.runCallback)(this.config.onDestroy,this))}},{key:"showList",value:function(){var e=this.elements,t=e.list,n=e.input;t.classList.add(this.config.classNames.listActive),n.focus(),this.selected.length>0&&this._showInput(),(0,r.runCallback)(this.config.onShow,this)}},{key:"hideList",value:function(){this.elements.list.classList.remove(this.config.classNames.listActive),this.selected.length>0&&this._hideInput(),this.elements.input.value="",this._renderList(),(0,r.runCallback)(this.config.onHide,this)}},{key:"selectItem",value:function(e){0===this.selected.length&&this._hideInput(),this.config.singleItem?this.selected[0]=e:this.selected.push(e),this._renderList(),this._renderSelected(),this._updateSubmitInput(),(0,r.runCallback)(this.config.onSelect,this)}},{key:"unselectItem",value:function(e){this.selected=this.selected.filter(function(t){return t!==e}),this._renderList(),this._renderSelected(),this._updateSubmitInput(),0===this.selected.length&&this._showInput(),(0,r.runCallback)(this.config.onUnselect,this)}},{key:"_initTemplates",value:function(){var e=this.config,t=e.classNames,n=e.searchPlaceholder,i=e.inputHiddenName,o=e.templateListItem,s=e.templateSelectedItem,a={container:function(){return(0,r.strToEl)('\n          <div class="'+t.container+'"></div>\n        ')},head:function(){return(0,r.strToEl)('\n          <div class="'+t.head+'"></div>\n        ')},list:function(){return(0,r.strToEl)('\n          <ul class="'+t.list+'"></ul>\n        ')},selectedList:function(){return(0,r.strToEl)('\n          <div class="'+t.selectedList+'"></div>\n        ')},input:function(){return(0,r.strToEl)('\n          <input type="text" class="'+t.input+'" placeholder="'+n+'" />\n        ')},hidden:function(){return(0,r.strToEl)('\n          <input type="hidden" name="'+i+'" />\n        ')},arrow:function(){return(0,r.strToEl)('\n          <span class="'+t.arrow+'"></span>\n        ')},addButton:function(){return(0,r.strToEl)('\n          <div class="'+t.addButton+'">Добавить</div>\n        ')},message:function(e){return(0,r.strToEl)('<li class="'+t.message+'">'+e+"</li>")},listItem:function(e){return(0,r.strToEl)('\n          <li class="'+t.listItem+'" data-id="'+e.id+'">\n            '+o(e)+"\n          </li>\n        ")},selectedItem:function(e){return(0,r.strToEl)('\n          <div class="'+t.selectedItem+'" data-id="'+e.id+'">\n            '+s(e)+'\n            <button class="'+t.removeButton+'"></button>\n          </div>\n        ')}};this.config.templates=a}},{key:"_getTemplate",value:function(e){if(!e)return null;for(var t=this.config.templates,n=arguments.length,i=Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];return t[e].apply(t,i)}},{key:"_createTemplates",value:function(){var e=this;["container","head","list","selectedList","input","hidden","arrow"].forEach(function(t){e.elements[t]=e._getTemplate(t)})}},{key:"_render",value:function(){var e=this.elements,t=e.container,n=e.head,i=e.list,r=e.selectedList,o=e.input,s=e.hidden,a=e.arrow;n.appendChild(r),n.appendChild(o),n.appendChild(s),n.appendChild(a),t.appendChild(n),t.appendChild(i),this.element.appendChild(t)}},{key:"_renderList",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.config.items,n=this.elements.list;n.innerHTML="",t.forEach(function(t){if(!(e.selected.indexOf(t.id)>=0)){var i=e._getTemplate("listItem",t);n.append(i)}}),n.children.length||this._renderMessage(this.config.noResultsText)}},{key:"_renderMessage",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this.elements.list,i=this._getTemplate("message",e);t&&(n.innerHTML=""),n.prepend(i)}},{key:"_renderSelected",value:function(){var e=this,t=this.elements.selectedList;t.innerHTML="",this.selected.forEach(function(n){var i=e.config.items.filter(function(e){return e.id===n})[0],r=e._getTemplate("selectedItem",i);t.append(r)}),this.selected.length&&!this.config.singleItem&&t.append(this._getTemplate("addButton"))}},{key:"_addEventListeners",value:function(){document.addEventListener("click",this._onClick),document.addEventListener("keydown",this._onKeyDown),this.elements.input.addEventListener("focus",this._onFocus),this.elements.input.addEventListener("input",this._onChange),this.elements.list.addEventListener("mouseover",this._onMouseOver)}},{key:"_removeEventListeners",value:function(){document.removeEventListener("click",this._onClick),document.removeEventListener("keydown",this._onKeyDown),this.elements.input.removeEventListener("focus",this._onFocus),this.elements.input.removeEventListener("input",this._onChange),this.elements.list.removeEventListener("mouseover",this._onMouseOver)}},{key:"_onClick",value:function(e){var t=this.elements,n=t.container,i=t.list,o=this.config.classNames,s=n.contains(e.target),a=i.classList.contains(o.listActive);if(s){var l=e.target,c=l.closest("."+o.listItem);if(c){var u=+c.getAttribute("data-id");this.selectItem(u),this.hideList()}if((0,r.hasClass)(l,o.arrow)&&((0,r.hasClass)(this.elements.list,o.listActive)?this.hideList():a||(this.showList(),this.elements.input.focus())),((0,r.hasClass)(l,o.input)||(0,r.hasClass)(l,o.head)||(0,r.hasClass)(l,o.selectedList)||(0,r.hasClass)(l,o.addButton))&&(a||(this.showList(),this.elements.input.focus())),(0,r.hasClass)(l,o.removeButton)){var h=+l.closest("."+o.selectedItem).getAttribute("data-id");this.unselectItem(h),a&&this.hideList()}}else a&&this.hideList()}},{key:"_onKeyDown",value:function(e){var t=this,n=this.elements.list.classList.contains(this.config.classNames.listActive);if(n){var i,r=function(n){e.preventDefault();var i=t.elements.list.children,r="down"===n?1:-1,o=void 0;[].concat(s(i)).forEach(function(e,n){e.classList.contains(t.config.classNames.listItemHighlight)&&(t._unhighlightElement(e),o=i[n+r]?i[n+r]:i[n])}),o||(o=i[0]),t._highlightElement(o),t._scrollToElem(o,r)};switch(e.keyCode){case 27:n&&(this.hideList(),this.elements.input.blur());break;case 9:this.hideList();break;case 38:r("up");break;case 40:r("down");break;case 13:i=t.elements.list.children,[].concat(s(i)).forEach(function(e){if(e.classList.contains(t.config.classNames.listItemHighlight)){var i=+e.getAttribute("data-id");t.selectItem(i),n&&(t.hideList(),t.elements.input.blur())}})}}}},{key:"_onFocus",value:function(e){this.elements.list.classList.contains(this.config.classNames.listActive)||this.showList()}},{key:"_onChange",value:function(e){this._searchItems(e.target.value)}},{key:"_onMouseOver",value:function(e){var t=e.target.closest("."+this.config.classNames.listItem);this._unhighlightAll(),t&&this._highlightElement(t)}},{key:"_searchItems",value:function(e){var t=this;if(""!==e){var n=(0,r.translit)(e);e=e.toLowerCase();var i=this.config.items.filter(function(e){return t.config.searchFields.some(function(t){if(t=e[t]){var i=(t=t.toLowerCase()).split(" ");return i.push(t),i.some(function(e){return n.some(function(t){return!e.indexOf(t)})})}})});this._renderList(i),0===i.length&&"string"==typeof this.config.serverSearch.url&&this._searchServer(n)}else this._renderList()}},{key:"_searchServer",value:function(e){var t,n=this,i=this.config.serverSearch,r=i.url,s=i.fields,a=i.paramNameQuery,l=i.paramNameFields,c=i.loadingText;this._renderMessage(c),fetch(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify((t={},o(t,a,e),o(t,l,s),t))}).then(function(e){return 200===e.status&&e.json()}).then(function(e){e&&n._renderList(e)})}},{key:"_showInput",value:function(){this.elements.input.style.display="block"}},{key:"_hideInput",value:function(){this.elements.input.style.display="none"}},{key:"_updateSubmitInput",value:function(){this.elements.hidden.value=this.selected.join(",")}},{key:"_highlightElement",value:function(e){e.classList.add(this.config.classNames.listItemHighlight)}},{key:"_unhighlightElement",value:function(e){e.classList.remove(this.config.classNames.listItemHighlight)}},{key:"_unhighlightAll",value:function(){var e=this,t=this.elements.list.children;[].concat(s(t)).forEach(function(t){t.classList.contains(e.config.classNames.listItemHighlight)&&e._unhighlightElement(t)})}},{key:"_scrollToElem",value:function(e,t){var n=this.elements.list,i=e.offsetTop,r=e.offsetTop+e.offsetHeight,o=this.elements.list.scrollTop,s=this.elements.list.offsetHeight;t>0&&r>s?n.scrollTop=r-s:t<0&&s+i<s+o&&(n.scrollTop=i)}}]),e}();e.exports=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=t.getType=function(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()},o=t.isType=function(e,t){var n=r(t);return void 0!==t&&null!==t&&n===e.toLowerCase()};t.strToEl=function(e){var t=document.createElement("div");return t.innerHTML=e.trim(),t.firstChild},t.runCallback=function(e,t){o("function",e)&&e.call(t)},t.hasClass=function(e,t){if("object"===(void 0===e?"undefined":i(e))||"string"==typeof t)return e.classList.contains(t)},t.extend=function e(){for(var t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];var r={};return n.forEach(function(t){o("Object",t)&&function(t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o("Object",t[n])?r[n]=e(!0,r[n],t[n]):r[n]=t[n])}(t)}),r},t.translit=function(e){var t={ru:"щ   ш  ч  ц  ю  я  ё  ж  ъ  ы  э  а б в г д е з и й к л м н о п р с т у ф х ь".split(/ +/g),en:"shh sh ch cz yu ya yo zh `` y' e` a b v g d e z i j k l m n o p r s t u f x `".split(/ +/g),ruBad:"o i x w . z \\ ; ] s ' f , d u l t p b q r k v y j g h c n e a [ m".split(/ +/g)},n=[];return e=e.toLowerCase(),[["ru","en"],["en","ru"],["ruBad","ru"],["ru","ruBad"],["ru","ruBad","en","ru"],["ruBad","ru","ru","en"]].forEach(function(i){for(var r=e,o=0;o<i.length;o+=2)for(var s=t[i[o]],a=t[i[o+1]],l=0,c=t.ru.length;l<c;l++)r=r.split(s[l]).join(a[l]);n.push(r)}),n}},function(e,t,n){"use strict";(function(t){var n=setTimeout;function i(){}function r(e){if(!(this instanceof r))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],c(e,this)}function o(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,r._immediateFn(function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var i;try{i=n(e._value)}catch(e){return void a(t.promise,e)}s(t.promise,i)}else(1===e._state?s:a)(t.promise,e._value)})):e._deferreds.push(t)}function s(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof r)return e._state=3,e._value=t,void l(e);if("function"==typeof n)return void c((i=n,o=t,function(){i.apply(o,arguments)}),e)}e._state=1,e._value=t,l(e)}catch(t){a(e,t)}var i,o}function a(e,t){e._state=2,e._value=t,l(e)}function l(e){2===e._state&&0===e._deferreds.length&&r._immediateFn(function(){e._handled||r._unhandledRejectionFn(e._value)});for(var t=0,n=e._deferreds.length;t<n;t++)o(e,e._deferreds[t]);e._deferreds=null}function c(e,t){var n=!1;try{e(function(e){n||(n=!0,s(t,e))},function(e){n||(n=!0,a(t,e))})}catch(e){if(n)return;n=!0,a(t,e)}}r.prototype.catch=function(e){return this.then(null,e)},r.prototype.then=function(e,t){var n=new this.constructor(i);return o(this,new function(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}(e,t,n)),n},r.prototype.finally=function(e){var t=this.constructor;return this.then(function(n){return t.resolve(e()).then(function(){return n})},function(n){return t.resolve(e()).then(function(){return t.reject(n)})})},r.all=function(e){return new r(function(t,n){if(!e||void 0===e.length)throw new TypeError("Promise.all accepts an array");var i=Array.prototype.slice.call(e);if(0===i.length)return t([]);var r=i.length;function o(e,s){try{if(s&&("object"==typeof s||"function"==typeof s)){var a=s.then;if("function"==typeof a)return void a.call(s,function(t){o(e,t)},n)}i[e]=s,0==--r&&t(i)}catch(e){n(e)}}for(var s=0;s<i.length;s++)o(s,i[s])})},r.resolve=function(e){return e&&"object"==typeof e&&e.constructor===r?e:new r(function(t){t(e)})},r.reject=function(e){return new r(function(t,n){n(e)})},r.race=function(e){return new r(function(t,n){for(var i=0,r=e.length;i<r;i++)e[i].then(t,n)})},r._immediateFn="function"==typeof t&&function(e){t(e)}||function(e){n(e,0)},r._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)},e.exports=r}).call(t,n(4).setImmediate)},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(r.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new o(r.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(5),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(t,n(0))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,r,o,s,a,l=1,c={},u=!1,h=e.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(e);f=f&&f.setTimeout?f:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick(function(){p(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},i=function(e){o.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(r=h.documentElement,i=function(e){var t=h.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):i=function(e){setTimeout(p,0,e)}:(s="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(s)&&p(+t.data.slice(s.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),i=function(t){e.postMessage(s+t,"*")}),f.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return c[l]=r,i(l),l++},f.clearImmediate=d}function d(e){delete c[e]}function p(e){if(u)setTimeout(p,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,i=e.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(n,i)}}(t)}finally{d(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(t,n(0),n(6))},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(e){i=s}}();var l,c=[],u=!1,h=-1;function f(){u&&l&&(u=!1,l.length?c=l.concat(c):h=-1,c.length&&d())}function d(){if(!u){var e=a(f);u=!0;for(var t=c.length;t;){for(l=c,c=[];++h<t;)l&&l[h].run();h=-1,t=c.length}l=null,u=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new p(e,t)),1!==c.length||u||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t){!function(e){"use strict";if(!e.fetch){var t={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(t.arrayBuffer)var n=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],i=function(e){return e&&DataView.prototype.isPrototypeOf(e)},r=ArrayBuffer.isView||function(e){return e&&n.indexOf(Object.prototype.toString.call(e))>-1};u.prototype.append=function(e,t){e=a(e),t=l(t);var n=this.map[e];this.map[e]=n?n+","+t:t},u.prototype.delete=function(e){delete this.map[a(e)]},u.prototype.get=function(e){return e=a(e),this.has(e)?this.map[e]:null},u.prototype.has=function(e){return this.map.hasOwnProperty(a(e))},u.prototype.set=function(e,t){this.map[a(e)]=l(t)},u.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},u.prototype.keys=function(){var e=[];return this.forEach(function(t,n){e.push(n)}),c(e)},u.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),c(e)},u.prototype.entries=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),c(e)},t.iterable&&(u.prototype[Symbol.iterator]=u.prototype.entries);var o=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},m.call(y.prototype),m.call(g.prototype),g.prototype.clone=function(){return new g(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new u(this.headers),url:this.url})},g.error=function(){var e=new g(null,{status:0,statusText:""});return e.type="error",e};var s=[301,302,303,307,308];g.redirect=function(e,t){if(-1===s.indexOf(t))throw new RangeError("Invalid status code");return new g(null,{status:t,headers:{location:e}})},e.Headers=u,e.Request=y,e.Response=g,e.fetch=function(e,n){return new Promise(function(i,r){var o=new y(e,n),s=new XMLHttpRequest;s.onload=function(){var e,t,n={status:s.status,statusText:s.statusText,headers:(e=s.getAllResponseHeaders()||"",t=new u,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(e){var n=e.split(":"),i=n.shift().trim();if(i){var r=n.join(":").trim();t.append(i,r)}}),t)};n.url="responseURL"in s?s.responseURL:n.headers.get("X-Request-URL");var r="response"in s?s.response:s.responseText;i(new g(r,n))},s.onerror=function(){r(new TypeError("Network request failed"))},s.ontimeout=function(){r(new TypeError("Network request failed"))},s.open(o.method,o.url,!0),"include"===o.credentials?s.withCredentials=!0:"omit"===o.credentials&&(s.withCredentials=!1),"responseType"in s&&t.blob&&(s.responseType="blob"),o.headers.forEach(function(e,t){s.setRequestHeader(t,e)}),s.send(void 0===o._bodyInit?null:o._bodyInit)})},e.fetch.polyfill=!0}function a(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function l(e){return"string"!=typeof e&&(e=String(e)),e}function c(e){var n={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return t.iterable&&(n[Symbol.iterator]=function(){return n}),n}function u(e){this.map={},e instanceof u?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function h(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function f(e){return new Promise(function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function d(e){var t=new FileReader,n=f(t);return t.readAsArrayBuffer(e),n}function p(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(t.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(t.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(t.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(t.arrayBuffer&&t.blob&&i(e))this._bodyArrayBuffer=p(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!t.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!r(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=p(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},t.blob&&(this.blob=function(){var e=h(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?h(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(d)}),this.text=function(){var e,t,n,i=h(this);if(i)return i;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,n=f(t),t.readAsText(e),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),i=0;i<t.length;i++)n[i]=String.fromCharCode(t[i]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},t.formData&&(this.formData=function(){return this.text().then(v)}),this.json=function(){return this.text().then(JSON.parse)},this}function y(e,t){var n,i,r=(t=t||{}).body;if(e instanceof y){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new u(e.headers)),this.method=e.method,this.mode=e.mode,r||null==e._bodyInit||(r=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new u(t.headers)),this.method=(n=t.method||this.method||"GET",i=n.toUpperCase(),o.indexOf(i)>-1?i:n),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function v(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var n=e.split("="),i=n.shift().replace(/\+/g," "),r=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(i),decodeURIComponent(r))}}),t}function g(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new u(t.headers),this.url=t.url||"",this._initBody(e)}}("undefined"!=typeof self?self:this)},function(e,t,n){"use strict";var i;[Element.prototype,Document.prototype,DocumentFragment.prototype].forEach(function(e){e.hasOwnProperty("append")||Object.defineProperty(e,"append",{configurable:!0,enumerable:!0,writable:!0,value:function(){var e=Array.prototype.slice.call(arguments),t=document.createDocumentFragment();e.forEach(function(e){var n=e instanceof Node;t.appendChild(n?e:document.createTextNode(String(e)))}),this.appendChild(t)}})}),[Element.prototype,Document.prototype,DocumentFragment.prototype].forEach(function(e){e.hasOwnProperty("prepend")||Object.defineProperty(e,"prepend",{configurable:!0,enumerable:!0,writable:!0,value:function(){var e=Array.prototype.slice.call(arguments),t=document.createDocumentFragment();e.forEach(function(e){var n=e instanceof Node;t.appendChild(n?e:document.createTextNode(String(e)))}),this.insertBefore(t,this.firstChild)}})}),(i=Element.prototype).closest=i.closest||function(e){for(var t=this;t;){if(t.matches(e))return t;t=t.parentElement}return null},function(e){var t=e.matches||e.matchesSelector||e.webkitMatchesSelector||e.mozMatchesSelector||e.msMatchesSelector||e.oMatchesSelector;e.matches=e.matchesSelector=t||function(e){var t=document.querySelectorAll(e),n=this;return Array.prototype.some.call(t,function(e){return e===n})}}(Element.prototype),Array.from||(Array.from=function(e){return[].slice.call(e)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMGVjMTZiYWZhMWE1MTE3ZWUxYTMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9kcm9wZG93bi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UtcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9saWIvcG9seWZpbGxzLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnIiwidGhpcyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJfdXRpbHMiLCJEcm9wZG93biIsImVsZW1lbnQiLCJ1c2VyQ29uZmlnIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2NsYXNzQ2FsbENoZWNrIiwiZWxlbWVudHMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjb25zb2xlIiwiZXJyb3IiLCJjb25maWciLCJleHRlbmQiLCJpdGVtcyIsInNpbmdsZUl0ZW0iLCJpbnB1dEhpZGRlbk5hbWUiLCJzZWFyY2hGaWVsZHMiLCJzZWFyY2hQbGFjZWhvbGRlciIsIm5vUmVzdWx0c1RleHQiLCJzZXJ2ZXJTZWFyY2giLCJ1cmwiLCJmaWVsZHMiLCJwYXJhbU5hbWVRdWVyeSIsInBhcmFtTmFtZUZpZWxkcyIsImxvYWRpbmdUZXh0IiwiY2xhc3NOYW1lcyIsImNvbnRhaW5lciIsImhlYWQiLCJzZWxlY3RlZExpc3QiLCJzZWxlY3RlZEl0ZW0iLCJyZW1vdmVCdXR0b24iLCJhZGRCdXR0b24iLCJpbnB1dCIsImFycm93IiwibGlzdCIsImxpc3RBY3RpdmUiLCJsaXN0SXRlbSIsImxpc3RJdGVtSGlnaGxpZ2h0IiwibWVzc2FnZSIsInRlbXBsYXRlTGlzdEl0ZW0iLCJpdGVtIiwiYXZhdGFyIiwidGVtcGxhdGVTZWxlY3RlZEl0ZW0iLCJvbkluaXQiLCJvbkRlc3Ryb3kiLCJvblNob3ciLCJvbkhpZGUiLCJvblNlbGVjdCIsIm9uVW5zZWxlY3QiLCJxdWVyeVNlbGVjdG9yIiwiaW5pdGlhbGlzZWQiLCJzZWxlY3RlZCIsIl9vbkNsaWNrIiwiYmluZCIsIl9vbktleURvd24iLCJfb25Gb2N1cyIsIl9vbkNoYW5nZSIsIl9vbk1vdXNlT3ZlciIsImluaXQiLCJfaW5pdFRlbXBsYXRlcyIsIl9jcmVhdGVUZW1wbGF0ZXMiLCJfcmVuZGVyIiwiX3JlbmRlckxpc3QiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJydW5DYWxsYmFjayIsImlubmVySFRNTCIsIl9yZW1vdmVFdmVudExpc3RlbmVycyIsIl9lbGVtZW50cyIsImNsYXNzTGlzdCIsImFkZCIsImZvY3VzIiwiX3Nob3dJbnB1dCIsInJlbW92ZSIsIl9oaWRlSW5wdXQiLCJ2YWx1ZSIsImlkIiwicHVzaCIsIl9yZW5kZXJTZWxlY3RlZCIsIl91cGRhdGVTdWJtaXRJbnB1dCIsImZpbHRlciIsIm9iaiIsIl9jb25maWciLCJ0ZW1wbGF0ZXMiLCJzdHJUb0VsIiwiaGlkZGVuIiwidGV4dCIsInRlbXBsYXRlIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJhcHBseSIsIl90aGlzIiwiZm9yRWFjaCIsIl9nZXRUZW1wbGF0ZSIsIl9lbGVtZW50czIiLCJhcHBlbmRDaGlsZCIsIl90aGlzMiIsImluZGV4T2YiLCJhcHBlbmQiLCJjaGlsZHJlbiIsIl9yZW5kZXJNZXNzYWdlIiwiaXNDbGVhbiIsInByZXBlbmQiLCJfdGhpczMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9lbGVtZW50czMiLCJpc0Ryb3Bkb3duIiwiY29udGFpbnMiLCJ0YXJnZXQiLCJpc0FjdGl2ZSIsImNsb3Nlc3QiLCJnZXRBdHRyaWJ1dGUiLCJzZWxlY3RJdGVtIiwiaGlkZUxpc3QiLCJoYXNDbGFzcyIsInNob3dMaXN0IiwidW5zZWxlY3RJdGVtIiwiX3RoaXM0Iiwib25BcnJvd0tleSIsImRpcmVjdGlvbiIsInByZXZlbnREZWZhdWx0IiwiZGlyIiwiYWN0aXZlSXRlbSIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheSIsIl91bmhpZ2hsaWdodEVsZW1lbnQiLCJfaGlnaGxpZ2h0RWxlbWVudCIsIl9zY3JvbGxUb0VsZW0iLCJrZXlDb2RlIiwiYmx1ciIsIl9zZWFyY2hJdGVtcyIsIl91bmhpZ2hsaWdodEFsbCIsIl90aGlzNSIsInZhcmlhbnRzIiwidHJhbnNsaXQiLCJ0b0xvd2VyQ2FzZSIsInJlc3VsdCIsInNvbWUiLCJmaWVsZCIsInBhcnRGaWVsZCIsInNwbGl0Iiwic3RyIiwiX3NlYXJjaFNlcnZlciIsIl9KU09OJHN0cmluZ2lmeSIsIl90aGlzNiIsIl9jb25maWckc2VydmVyU2VhcmNoIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiQ29udGVudC1UeXBlIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJfZGVmaW5lUHJvcGVydHkiLCJ0aGVuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJqc29uIiwic3R5bGUiLCJkaXNwbGF5Iiwiam9pbiIsIl90aGlzNyIsIml0ZW1Ub3AiLCJvZmZzZXRUb3AiLCJpdGVtQm90dG9tIiwib2Zmc2V0SGVpZ2h0Iiwic2Nyb2xsVG9wIiwibGlzdEhlaWdodCIsImdldFR5cGUiLCJ0b1N0cmluZyIsInNsaWNlIiwiaXNUeXBlIiwidCIsInR5cGUiLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwidHJpbSIsImZpcnN0Q2hpbGQiLCJmbiIsImNvbnRleHQiLCJlbCIsImNsYXNzTmFtZSIsIl90eXBlb2YiLCJleHRlbmRlZCIsInByb3AiLCJtZXJnZSIsImFscGhhYmV0IiwicnUiLCJlbiIsInJ1QmFkIiwicmVsdWx0cyIsInZhcmlhbnQiLCJyZXMiLCJmcm9tIiwidG8iLCJzZXRUaW1lb3V0RnVuYyIsInNldFRpbWVvdXQiLCJub29wIiwiUHJvbWlzZSIsIlR5cGVFcnJvciIsIl9zdGF0ZSIsIl9oYW5kbGVkIiwiX3ZhbHVlIiwiX2RlZmVycmVkcyIsImRvUmVzb2x2ZSIsImhhbmRsZSIsInNlbGYiLCJkZWZlcnJlZCIsIl9pbW1lZGlhdGVGbiIsImNiIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwicmV0IiwicmVqZWN0IiwicHJvbWlzZSIsInJlc29sdmUiLCJuZXdWYWx1ZSIsImZpbmFsZSIsInRoaXNBcmciLCJfdW5oYW5kbGVkUmVqZWN0aW9uRm4iLCJsZW4iLCJkb25lIiwicmVhc29uIiwiZXgiLCJwcm9tIiwiY29uc3RydWN0b3IiLCJjYWxsYmFjayIsImFsbCIsImFyciIsInJlbWFpbmluZyIsInZhbCIsInJhY2UiLCJ2YWx1ZXMiLCJzZXRJbW1lZGlhdGUiLCJlcnIiLCJ3YXJuIiwiZ2xvYmFsIiwic2NvcGUiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwiY2xlYXJUaW1lb3V0Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidGltZW91dCIsImNsb3NlIiwidW5yZWYiLCJyZWYiLCJlbnJvbGwiLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJhY3RpdmUiLCJfb25UaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJwcm9jZXNzIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJodG1sIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwiZ2V0UHJvdG90eXBlT2YiLCJuZXh0VGljayIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJldmVudCIsImRhdGEiLCJwb3J0MiIsImRvY3VtZW50RWxlbWVudCIsInNjcmlwdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlbW92ZUNoaWxkIiwiTWF0aCIsInJhbmRvbSIsInNvdXJjZSIsImF0dGFjaEV2ZW50IiwidGFzayIsInJ1biIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsInN1cHBvcnQiLCJzZWFyY2hQYXJhbXMiLCJpdGVyYWJsZSIsIlN5bWJvbCIsImJsb2IiLCJCbG9iIiwiZm9ybURhdGEiLCJhcnJheUJ1ZmZlciIsInZpZXdDbGFzc2VzIiwiaXNEYXRhVmlldyIsIkRhdGFWaWV3IiwiaXNQcm90b3R5cGVPZiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJIZWFkZXJzIiwibm9ybWFsaXplTmFtZSIsIm5vcm1hbGl6ZVZhbHVlIiwib2xkVmFsdWUiLCJtYXAiLCJoYXMiLCJzZXQiLCJrZXlzIiwiaXRlcmF0b3JGb3IiLCJlbnRyaWVzIiwiaXRlcmF0b3IiLCJtZXRob2RzIiwiUmVxdWVzdCIsImNsb25lIiwiX2JvZHlJbml0IiwiQm9keSIsIlJlc3BvbnNlIiwic3RhdHVzVGV4dCIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsIlJhbmdlRXJyb3IiLCJsb2NhdGlvbiIsInJlcXVlc3QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9ubG9hZCIsInJhd0hlYWRlcnMiLCJvcHRpb25zIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVwbGFjZSIsImxpbmUiLCJwYXJ0cyIsImtleSIsInNoaWZ0IiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZVRleHQiLCJvbmVycm9yIiwib250aW1lb3V0Iiwib3BlbiIsImNyZWRlbnRpYWxzIiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJwb2x5ZmlsbCIsIlN0cmluZyIsInRlc3QiLCJuZXh0IiwiaXNBcnJheSIsImhlYWRlciIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25zdW1lZCIsImJvZHlVc2VkIiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJidWYiLCJ2aWV3IiwiVWludDhBcnJheSIsImJ5dGVMZW5ndGgiLCJidWZmZXIiLCJfaW5pdEJvZHkiLCJfYm9keVRleHQiLCJfYm9keUJsb2IiLCJGb3JtRGF0YSIsIl9ib2R5Rm9ybURhdGEiLCJVUkxTZWFyY2hQYXJhbXMiLCJfYm9keUFycmF5QnVmZmVyIiwicmVqZWN0ZWQiLCJyZWFkQXNUZXh0IiwiY2hhcnMiLCJmcm9tQ2hhckNvZGUiLCJyZWFkQXJyYXlCdWZmZXJBc1RleHQiLCJkZWNvZGUiLCJwYXJzZSIsInVwY2FzZWQiLCJtb2RlIiwidG9VcHBlckNhc2UiLCJyZWZlcnJlciIsImZvcm0iLCJieXRlcyIsImRlY29kZVVSSUNvbXBvbmVudCIsImJvZHlJbml0Iiwib2siLCJFbGVtZW50IiwiRG9jdW1lbnQiLCJEb2N1bWVudEZyYWdtZW50Iiwid3JpdGFibGUiLCJhcmdBcnIiLCJkb2NGcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImFyZ0l0ZW0iLCJpc05vZGUiLCJOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJjc3MiLCJub2RlIiwibWF0Y2hlcyIsInBhcmVudEVsZW1lbnQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJzZWxlY3RvciIsInRoIl0sIm1hcHBpbmdzIjoieUJBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQXFDQSxPQWhDQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWhCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQWlCLFdBQ0EsV0FBMkIsT0FBQWpCLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFRLEVBQUFDLEdBQXNELE9BQUFSLE9BQUFTLFVBQUFDLGVBQUFqQixLQUFBYyxFQUFBQyxJQUd0RHRCLEVBQUF5QixFQUFBLEdBR0F6QixJQUFBMEIsRUFBQSxtQkM3REEsSUFBQUMsRUFHQUEsRUFBQSxXQUNBLE9BQUFDLEtBREEsR0FJQSxJQUVBRCxLQUFBRSxTQUFBLGNBQUFBLEtBQUEsRUFBQUMsTUFBQSxRQUNDLE1BQUFDLEdBRUQsaUJBQUFDLFNBQ0FMLEVBQUFLLFFBT0E3QixFQUFBRCxRQUFBeUIseVJDcEJBTSxFQUFBakMsRUFBQSxtUEFDQUEsRUFBQSxHQUNBQSxFQUFBLEdBQ0FBLEVBQUEsT0FFTWtDLGFBQ0osU0FBQUEsRUFBYUMsR0FBMEIsSUFBakJDLEVBQWlCQyxVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxNQUNyQywrRkFEcUNHLENBQUFaLEtBQUFNLEdBQ2QsaUJBQVpDLEVBQXNCLENBQy9CLElBQU1NLEVBQVdDLFNBQVNDLGlCQUFpQlIsR0FFM0MsR0FBd0IsSUFBcEJNLEVBQVNILE9BRVgsWUFEQU0sUUFBUUMsTUFBUixzQkFBb0NWLEVBQXBDLGVBSUYsR0FBSU0sRUFBU0gsT0FBUyxFQUNwQixJQUFLLElBQUlsQyxFQUFJLEVBQUdBLEVBQUlxQyxFQUFTSCxPQUFRbEMsSUFDbkMsSUFBSThCLEVBQVNPLEVBQVNyQyxHQUFJZ0MsR0FvRWhDUixLQUFLa0IsUUFBUyxFQUFBYixFQUFBYyxTQTdEWkMsU0FDQUMsWUFBWSxFQUNaQyxnQkFBaUIsV0FHakJDLGNBQWUsUUFDZkMsa0JBQW1CLDhCQUNuQkMsY0FBZSx5QkFHZkMsY0FDRUMsSUFBSyxLQUNMQyxVQUNBQyxlQUFnQixJQUNoQkMsZ0JBQWlCLFNBQ2pCQyxZQUFhLGVBSWZDLFlBQ0VDLFVBQVcsV0FDWEMsS0FBTSxpQkFDTkMsYUFBYyxxQkFDZEMsYUFBYyxtQkFDZEMsYUFBYyx1QkFDZEMsVUFBVyx1QkFDWEMsTUFBTyxrQkFDUEMsTUFBTyxrQkFDUEMsS0FBTSxpQkFDTkMsV0FBWSx3QkFDWkMsU0FBVSxpQkFDVkMsa0JBQW1CLHVCQUNuQkMsUUFBUyxxQkFJWEMsaUJBQWtCLFNBQUFDLEdBQ2hCLDJKQUcrQ0EsRUFBS0MsT0FIcEQsbUZBTW1DRCxFQUFLaEUsS0FOeEMsdUNBV0ZrRSxxQkFBc0IsU0FBQUYsR0FDcEIsT0FBT0EsRUFBS2hFLE1BSWRtRSxPQUFRLEtBQ1JDLFVBQVcsS0FDWEMsT0FBUSxLQUNSQyxPQUFRLEtBQ1JDLFNBQVUsS0FDVkMsV0FBWSxNQUdzQi9DLEdBQ3BDUixLQUFLTyxRQUE2QixpQkFBWkEsRUFBdUJPLFNBQVMwQyxjQUFjakQsR0FBV0EsRUFDL0VQLEtBQUthLFlBQ0xiLEtBQUt5RCxhQUFjLEVBQ25CekQsS0FBSzBELFlBR0wxRCxLQUFLMkQsU0FBVzNELEtBQUsyRCxTQUFTQyxLQUFLNUQsTUFDbkNBLEtBQUs2RCxXQUFhN0QsS0FBSzZELFdBQVdELEtBQUs1RCxNQUN2Q0EsS0FBSzhELFNBQVc5RCxLQUFLOEQsU0FBU0YsS0FBSzVELE1BQ25DQSxLQUFLK0QsVUFBWS9ELEtBQUsrRCxVQUFVSCxLQUFLNUQsTUFDckNBLEtBQUtnRSxhQUFlaEUsS0FBS2dFLGFBQWFKLEtBQUs1RCxNQUczQ0EsS0FBS2lFLEtBQUtqRSxLQUFLa0IsT0FBTytDLGdEQWVHLElBQXJCakUsS0FBS3lELGNBSVR6RCxLQUFLa0UsaUJBQ0xsRSxLQUFLbUUsbUJBQ0xuRSxLQUFLb0UsVUFDTHBFLEtBQUtxRSxjQUNMckUsS0FBS3NFLHFCQUVMdEUsS0FBS3lELGFBQWMsR0FHbkIsRUFBQXBELEVBQUFrRSxhQUFZdkUsS0FBS2tCLE9BQU9nQyxPQUFRbEQsMENBU1AsSUFBckJBLEtBQUt5RCxjQUlUekQsS0FBS08sUUFBUWlFLFVBQVksR0FDekJ4RSxLQUFLYSxZQUNMYixLQUFLMEQsWUFFTDFELEtBQUt5RSx3QkFDTHpFLEtBQUt5RCxhQUFjLEdBR25CLEVBQUFwRCxFQUFBa0UsYUFBWXZFLEtBQUtrQixPQUFPaUMsVUFBV25ELDBDQVF6QixJQUFBMEUsRUFDYzFFLEtBQUthLFNBQXJCNEIsRUFERWlDLEVBQ0ZqQyxLQUFNRixFQURKbUMsRUFDSW5DLE1BQ2RFLEVBQUtrQyxVQUFVQyxJQUFJNUUsS0FBS2tCLE9BQU9jLFdBQVdVLFlBQzFDSCxFQUFNc0MsUUFFRjdFLEtBQUswRCxTQUFTaEQsT0FBUyxHQUN6QlYsS0FBSzhFLGNBSVAsRUFBQXpFLEVBQUFrRSxhQUFZdkUsS0FBS2tCLE9BQU9rQyxPQUFRcEQseUNBU2ZBLEtBQUthLFNBQWQ0QixLQUNIa0MsVUFBVUksT0FBTy9FLEtBQUtrQixPQUFPYyxXQUFXVSxZQUV6QzFDLEtBQUswRCxTQUFTaEQsT0FBUyxHQUN6QlYsS0FBS2dGLGFBSVBoRixLQUFLYSxTQUFTMEIsTUFBTTBDLE1BQVEsR0FDNUJqRixLQUFLcUUsZUFHTCxFQUFBaEUsRUFBQWtFLGFBQVl2RSxLQUFLa0IsT0FBT21DLE9BQVFyRCx5Q0FRdEJrRixHQUNtQixJQUF6QmxGLEtBQUswRCxTQUFTaEQsUUFDaEJWLEtBQUtnRixhQUdGaEYsS0FBS2tCLE9BQU9HLFdBR2ZyQixLQUFLMEQsU0FBUyxHQUFLd0IsRUFGbkJsRixLQUFLMEQsU0FBU3lCLEtBQUtELEdBS3JCbEYsS0FBS3FFLGNBQ0xyRSxLQUFLb0Ysa0JBQ0xwRixLQUFLcUYsc0JBR0wsRUFBQWhGLEVBQUFrRSxhQUFZdkUsS0FBS2tCLE9BQU9vQyxTQUFVdEQsMkNBUXRCa0YsR0FDWmxGLEtBQUswRCxTQUFXMUQsS0FBSzBELFNBQVM0QixPQUFPLFNBQUFDLEdBQUEsT0FBT0EsSUFBUUwsSUFDcERsRixLQUFLcUUsY0FDTHJFLEtBQUtvRixrQkFDTHBGLEtBQUtxRixxQkFFd0IsSUFBekJyRixLQUFLMEQsU0FBU2hELFFBQ2hCVixLQUFLOEUsY0FJUCxFQUFBekUsRUFBQWtFLGFBQVl2RSxLQUFLa0IsT0FBT3FDLFdBQVl2RCwrQ0FjcEIsSUFBQXdGLEVBQ21GeEYsS0FBS2tCLE9BQWhHYyxFQURRd0QsRUFDUnhELFdBQVlSLEVBREpnRSxFQUNJaEUsa0JBQW1CRixFQUR2QmtFLEVBQ3VCbEUsZ0JBQWlCd0IsRUFEeEMwQyxFQUN3QzFDLGlCQUFrQkcsRUFEMUR1QyxFQUMwRHZDLHFCQUVwRXdDLEdBQ0p4RCxVQUFXLFdBQ1QsT0FBTyxFQUFBNUIsRUFBQXFGLFNBQUEsMkJBQ1MxRCxFQUFXQyxVQURwQix1QkFLVEMsS0FBTSxXQUNKLE9BQU8sRUFBQTdCLEVBQUFxRixTQUFBLDJCQUNTMUQsRUFBV0UsS0FEcEIsdUJBS1RPLEtBQU0sV0FDSixPQUFPLEVBQUFwQyxFQUFBcUYsU0FBQSwwQkFDUTFELEVBQVdTLEtBRG5CLHNCQUtUTixhQUFjLFdBQ1osT0FBTyxFQUFBOUIsRUFBQXFGLFNBQUEsMkJBQ1MxRCxFQUFXRyxhQURwQix1QkFLVEksTUFBTyxXQUNMLE9BQU8sRUFBQWxDLEVBQUFxRixTQUFBLHlDQUN1QjFELEVBQVdPLE1BRGxDLGtCQUN5RGYsRUFEekQsbUJBS1RtRSxPQUFRLFdBQ04sT0FBTyxFQUFBdEYsRUFBQXFGLFNBQUEsMENBQ3dCcEUsRUFEeEIsbUJBS1RrQixNQUFPLFdBQ0wsT0FBTyxFQUFBbkMsRUFBQXFGLFNBQUEsNEJBQ1UxRCxFQUFXUSxNQURyQix3QkFLVEYsVUFBVyxXQUNULE9BQU8sRUFBQWpDLEVBQUFxRixTQUFBLDJCQUNTMUQsRUFBV00sVUFEcEIsK0JBS1RPLFFBQVMsU0FBQytDLEdBQ1IsT0FBTyxFQUFBdkYsRUFBQXFGLFNBQUEsY0FBc0IxRCxFQUFXYSxRQUFqQyxLQUE2QytDLEVBQTdDLFVBR1RqRCxTQUFVLFNBQUNJLEdBQ1QsT0FBTyxFQUFBMUMsRUFBQXFGLFNBQUEsMEJBQ1ExRCxFQUFXVyxTQURuQixjQUN5Q0ksRUFBS21DLEdBRDlDLG1CQUVEcEMsRUFBaUJDLEdBRmhCLGdDQU9UWCxhQUFjLFNBQUNXLEdBQ2IsT0FBTyxFQUFBMUMsRUFBQXFGLFNBQUEsMkJBQ1MxRCxFQUFXSSxhQURwQixjQUM4Q1csRUFBS21DLEdBRG5ELG1CQUVEakMsRUFBcUJGLEdBRnBCLGdDQUdjZixFQUFXSyxhQUh6Qiw2Q0FTWHJDLEtBQUtrQixPQUFPdUUsVUFBWUEsdUNBVVpJLEdBQ1osSUFBS0EsRUFDSCxPQUFPLEtBRnNCLElBSy9CLElBQU1KLEVBQVl6RixLQUFLa0IsT0FBT3VFLFVBTENLLEVBQUFyRixVQUFBQyxPQUFOcUYsRUFBTUMsTUFBQUYsRUFBQSxFQUFBQSxFQUFBLEtBQUFHLEVBQUEsRUFBQUEsRUFBQUgsRUFBQUcsSUFBTkYsRUFBTUUsRUFBQSxHQUFBeEYsVUFBQXdGLEdBTS9CLE9BQU9SLEVBQVVJLEdBQVZLLE1BQUFULEVBQXVCTSw4Q0FRWixJQUFBSSxFQUFBbkcsTUFDQyxZQUFhLE9BQVEsT0FBUSxlQUFnQixRQUFTLFNBQVUsU0FFekVvRyxRQUFRLFNBQUFyRCxHQUNoQm9ELEVBQUt0RixTQUFTa0MsR0FBUW9ELEVBQUtFLGFBQWF0RCx1Q0FTakMsSUFBQXVELEVBQzZEdEcsS0FBS2EsU0FBbkVvQixFQURDcUUsRUFDRHJFLFVBQVdDLEVBRFZvRSxFQUNVcEUsS0FBTU8sRUFEaEI2RCxFQUNnQjdELEtBQU1OLEVBRHRCbUUsRUFDc0JuRSxhQUFjSSxFQURwQytELEVBQ29DL0QsTUFBT29ELEVBRDNDVyxFQUMyQ1gsT0FBUW5ELEVBRG5EOEQsRUFDbUQ5RCxNQUU1RE4sRUFBS3FFLFlBQVlwRSxHQUNqQkQsRUFBS3FFLFlBQVloRSxHQUNqQkwsRUFBS3FFLFlBQVlaLEdBQ2pCekQsRUFBS3FFLFlBQVkvRCxHQUVqQlAsRUFBVXNFLFlBQVlyRSxHQUN0QkQsRUFBVXNFLFlBQVk5RCxHQUV0QnpDLEtBQUtPLFFBQVFnRyxZQUFZdEUseUNBUWEsSUFBQXVFLEVBQUF4RyxLQUEzQm9CLEVBQTJCWCxVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFuQlQsS0FBS2tCLE9BQU9FLE1BQ3ZCcUIsRUFBU3pDLEtBQUthLFNBQWQ0QixLQUVSQSxFQUFLK0IsVUFBWSxHQUVqQnBELEVBQU1nRixRQUFRLFNBQUFyRCxHQUNaLEtBQUl5RCxFQUFLOUMsU0FBUytDLFFBQVExRCxFQUFLbUMsS0FBTyxHQUF0QyxDQUNBLElBQU0zRSxFQUFVaUcsRUFBS0gsYUFBYSxXQUFZdEQsR0FDOUNOLEVBQUtpRSxPQUFPbkcsTUFHVGtDLEVBQUtrRSxTQUFTakcsUUFDakJWLEtBQUs0RyxlQUFlNUcsS0FBS2tCLE9BQU9PLHNEQVNwQm9CLEdBQXlCLElBQWhCZ0UsSUFBZ0JwRyxVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsS0FBQUEsVUFBQSxHQUMvQmdDLEVBQVN6QyxLQUFLYSxTQUFkNEIsS0FDRmxDLEVBQVVQLEtBQUtxRyxhQUFhLFVBQVd4RCxHQUV6Q2dFLElBQ0ZwRSxFQUFLK0IsVUFBWSxJQUduQi9CLEVBQUtxRSxRQUFRdkcsNkNBUUksSUFBQXdHLEVBQUEvRyxLQUNUbUMsRUFBaUJuQyxLQUFLYSxTQUF0QnNCLGFBRVJBLEVBQWFxQyxVQUFZLEdBRXpCeEUsS0FBSzBELFNBQVMwQyxRQUFRLFNBQUFsQixHQUNwQixJQUFNSyxFQUFNd0IsRUFBSzdGLE9BQU9FLE1BQU1rRSxPQUFPLFNBQUFDLEdBQUEsT0FBT0EsRUFBSUwsS0FBT0EsSUFBSSxHQUNyRDNFLEVBQVV3RyxFQUFLVixhQUFhLGVBQWdCZCxHQUNsRHBELEVBQWF1RSxPQUFPbkcsS0FHbEJQLEtBQUswRCxTQUFTaEQsU0FBV1YsS0FBS2tCLE9BQU9HLFlBQ3ZDYyxFQUFhdUUsT0FBTzFHLEtBQUtxRyxhQUFhLDJEQVV4Q3ZGLFNBQVNrRyxpQkFBaUIsUUFBU2hILEtBQUsyRCxVQUN4QzdDLFNBQVNrRyxpQkFBaUIsVUFBV2hILEtBQUs2RCxZQUMxQzdELEtBQUthLFNBQVMwQixNQUFNeUUsaUJBQWlCLFFBQVNoSCxLQUFLOEQsVUFDbkQ5RCxLQUFLYSxTQUFTMEIsTUFBTXlFLGlCQUFpQixRQUFTaEgsS0FBSytELFdBQ25EL0QsS0FBS2EsU0FBUzRCLEtBQUt1RSxpQkFBaUIsWUFBYWhILEtBQUtnRSw4REFTdERsRCxTQUFTbUcsb0JBQW9CLFFBQVNqSCxLQUFLMkQsVUFDM0M3QyxTQUFTbUcsb0JBQW9CLFVBQVdqSCxLQUFLNkQsWUFDN0M3RCxLQUFLYSxTQUFTMEIsTUFBTTBFLG9CQUFvQixRQUFTakgsS0FBSzhELFVBQ3REOUQsS0FBS2EsU0FBUzBCLE1BQU0wRSxvQkFBb0IsUUFBU2pILEtBQUsrRCxXQUN0RC9ELEtBQUthLFNBQVM0QixLQUFLd0Usb0JBQW9CLFlBQWFqSCxLQUFLZ0UsK0NBUWpEN0QsR0FBRyxJQUFBK0csRUFDaUJsSCxLQUFLYSxTQUF6Qm9CLEVBREdpRixFQUNIakYsVUFBV1EsRUFEUnlFLEVBQ1F6RSxLQUNYVCxFQUFlaEMsS0FBS2tCLE9BQXBCYyxXQUNGbUYsRUFBYWxGLEVBQVVtRixTQUFTakgsRUFBRWtILFFBQ2xDQyxFQUFXN0UsRUFBS2tDLFVBQVV5QyxTQUFTcEYsRUFBV1UsWUFFcEQsR0FBSXlFLEVBQVksQ0FDZCxJQUFJRSxFQUFTbEgsRUFBRWtILE9BQ1h0RSxFQUFPc0UsRUFBT0UsUUFBUCxJQUFtQnZGLEVBQVdXLFVBR3pDLEdBQUlJLEVBQU0sQ0FDUixJQUFNbUMsR0FBTW5DLEVBQUt5RSxhQUFhLFdBQzlCeEgsS0FBS3lILFdBQVd2QyxHQUNoQmxGLEtBQUswSCxXQTZCUCxJQXpCSSxFQUFBckgsRUFBQXNILFVBQVNOLEVBQVFyRixFQUFXUSxVQUMxQixFQUFBbkMsRUFBQXNILFVBQVMzSCxLQUFLYSxTQUFTNEIsS0FBTVQsRUFBV1UsWUFDMUMxQyxLQUFLMEgsV0FFREosSUFDRnRILEtBQUs0SCxXQUNMNUgsS0FBS2EsU0FBUzBCLE1BQU1zQyxZQU94QixFQUFBeEUsRUFBQXNILFVBQVNOLEVBQVFyRixFQUFXTyxTQUM1QixFQUFBbEMsRUFBQXNILFVBQVNOLEVBQVFyRixFQUFXRSxRQUM1QixFQUFBN0IsRUFBQXNILFVBQVNOLEVBQVFyRixFQUFXRyxnQkFDNUIsRUFBQTlCLEVBQUFzSCxVQUFTTixFQUFRckYsRUFBV00sY0FFeEJnRixJQUNGdEgsS0FBSzRILFdBQ0w1SCxLQUFLYSxTQUFTMEIsTUFBTXNDLFdBS3BCLEVBQUF4RSxFQUFBc0gsVUFBU04sRUFBUXJGLEVBQVdLLGNBQWUsQ0FDN0MsSUFDTTZDLEdBRFVtQyxFQUFPRSxRQUFQLElBQW1CdkYsRUFBV0ksY0FDMUJvRixhQUFhLFdBQ2pDeEgsS0FBSzZILGFBQWEzQyxHQUVmb0MsR0FDRHRILEtBQUswSCxpQkFJTEosR0FDRnRILEtBQUswSCw4Q0FLQ3ZILEdBQUcsSUFBQTJILEVBQUE5SCxLQUNQc0gsRUFBV3RILEtBQUthLFNBQVM0QixLQUFLa0MsVUFBVXlDLFNBQVNwSCxLQUFLa0IsT0FBT2MsV0FBV1UsWUFFOUUsR0FBSzRFLEVBQUwsQ0FJQSxJQUNRN0UsRUFjRnNGLEVBQWEsU0FBQUMsR0FDakI3SCxFQUFFOEgsaUJBRUYsSUFBTXhGLEVBQU9xRixFQUFLakgsU0FBUzRCLEtBQUtrRSxTQUMxQnVCLEVBQXFCLFNBQWRGLEVBQXVCLEdBQUssRUFFckNHLFlBRUpDLE9BQUFDLEVBQUk1RixJQUFNMkQsUUFBUSxTQUFDckQsRUFBTXZFLEdBQ25CdUUsRUFBSzRCLFVBQVV5QyxTQUFTVSxFQUFLNUcsT0FBT2MsV0FBV1kscUJBQ2pEa0YsRUFBS1Esb0JBQW9CdkYsR0FHdkJvRixFQURFMUYsRUFBS2pFLEVBQUkwSixHQUNFekYsRUFBS2pFLEVBQUkwSixHQUVUekYsRUFBS2pFLE1BS25CMkosSUFDSEEsRUFBYTFGLEVBQUssSUFHcEJxRixFQUFLUyxrQkFBa0JKLEdBQ3ZCTCxFQUFLVSxjQUFjTCxFQUFZRCxJQUdqQyxPQUFRL0gsRUFBRXNJLFNBQ1IsS0FBSyxHQUNDbkIsSUFDRnRILEtBQUswSCxXQUNMMUgsS0FBS2EsU0FBUzBCLE1BQU1tRyxRQUV0QixNQUNGLEtBQUssRUFDSDFJLEtBQUswSCxXQUNMLE1BQ0YsS0FBSyxHQUNISyxFQUFXLE1BQ1gsTUFDRixLQUFLLEdBQ0hBLEVBQVcsUUFDWCxNQUNGLEtBQUssR0ExREN0RixFQUFPcUYsRUFBS2pILFNBQVM0QixLQUFLa0UsWUFDaEN5QixPQUFBQyxFQUFJNUYsSUFBTTJELFFBQVEsU0FBQXJELEdBQ2hCLEdBQUlBLEVBQUs0QixVQUFVeUMsU0FBU1UsRUFBSzVHLE9BQU9jLFdBQVdZLG1CQUFvQixDQUNyRSxJQUFNc0MsR0FBTW5DLEVBQUt5RSxhQUFhLFdBQzlCTSxFQUFLTCxXQUFXdkMsR0FFYm9DLElBQ0RRLEVBQUtKLFdBQ0xJLEVBQUtqSCxTQUFTMEIsTUFBTW1HLDhDQXdEcEJ2SSxHQUNTSCxLQUFLYSxTQUFTNEIsS0FBS2tDLFVBQVV5QyxTQUFTcEgsS0FBS2tCLE9BQU9jLFdBQVdVLGFBRzVFMUMsS0FBSzRILDZDQUlFekgsR0FDVEgsS0FBSzJJLGFBQWF4SSxFQUFFa0gsT0FBT3BDLDRDQUdmOUUsR0FDWixJQUFNNEMsRUFBTzVDLEVBQUVrSCxPQUFPRSxRQUFULElBQXFCdkgsS0FBS2tCLE9BQU9jLFdBQVdXLFVBQ3pEM0MsS0FBSzRJLGtCQUVEN0YsR0FDRi9DLEtBQUt1SSxrQkFBa0J4Rix3Q0FTYlIsR0FBTyxJQUFBc0csRUFBQTdJLEtBQ25CLEdBQWMsS0FBVnVDLEVBQUosQ0FNQSxJQUFNdUcsR0FBVyxFQUFBekksRUFBQTBJLFVBQVN4RyxHQUMxQkEsRUFBUUEsRUFBTXlHLGNBR2QsSUFBSUMsRUFBU2pKLEtBQUtrQixPQUFPRSxNQUFNa0UsT0FBTyxTQUFBdkMsR0FDcEMsT0FBTzhGLEVBQUszSCxPQUFPSyxhQUFhMkgsS0FBSyxTQUFBQyxHQUduQyxHQUZBQSxFQUFRcEcsRUFBS29HLEdBRUYsQ0FFVCxJQUFNQyxHQURORCxFQUFRQSxFQUFNSCxlQUNVSyxNQUFNLEtBRzlCLE9BRkFELEVBQVVqRSxLQUFLZ0UsR0FFUkMsRUFBVUYsS0FBSyxTQUFBbkcsR0FDcEIsT0FBTytGLEVBQVNJLEtBQUssU0FBQUksR0FBQSxPQUFRdkcsRUFBSzBELFFBQVE2QyxZQU1sRHRKLEtBQUtxRSxZQUFZNEUsR0FHSyxJQUFsQkEsRUFBT3ZJLFFBQ21DLGlCQUFqQ1YsS0FBS2tCLE9BQU9RLGFBQWFDLEtBQ2xDM0IsS0FBS3VKLGNBQWNULFFBOUJyQjlJLEtBQUtxRSxvREF3Q015RSxHQUFVLElBQUFVLEVBQUFDLEVBQUF6SixLQUFBMEosRUFDK0MxSixLQUFLa0IsT0FBT1EsYUFBMUVDLEVBRGUrSCxFQUNmL0gsSUFBS0MsRUFEVThILEVBQ1Y5SCxPQUFRQyxFQURFNkgsRUFDRjdILGVBQWdCQyxFQURkNEgsRUFDYzVILGdCQUFpQkMsRUFEL0IySCxFQUMrQjNILFlBQ3REL0IsS0FBSzRHLGVBQWU3RSxHQUVwQjRILE1BQU1oSSxHQUNKaUksT0FBUSxPQUNSQyxTQUNFQyxlQUFnQixvQkFFbEJDLEtBQU1DLEtBQUtDLFdBQUxULEtBQUFVLEVBQUFWLEVBQ0gzSCxFQUFpQmlILEdBRGRvQixFQUFBVixFQUVIMUgsRUFBa0JGLEdBRmY0SCxNQUlMVyxLQUFLLFNBQUFDLEdBQ04sT0FBd0IsTUFBcEJBLEVBQVNDLFFBSU5ELEVBQVNFLFNBQ2ZILEtBQUssU0FBQS9JLEdBQ0ZBLEdBQ0ZxSSxFQUFLcEYsWUFBWWpELDBDQVdyQnBCLEtBQUthLFNBQVMwQixNQUFNZ0ksTUFBTUMsUUFBVSw2Q0FTcEN4SyxLQUFLYSxTQUFTMEIsTUFBTWdJLE1BQU1DLFFBQVUsb0RBU3BDeEssS0FBS2EsU0FBUzhFLE9BQU9WLE1BQVFqRixLQUFLMEQsU0FBUytHLEtBQUssK0NBUS9CMUgsR0FDakJBLEVBQUs0QixVQUFVQyxJQUFJNUUsS0FBS2tCLE9BQU9jLFdBQVdZLCtEQVF2QkcsR0FDbkJBLEVBQUs0QixVQUFVSSxPQUFPL0UsS0FBS2tCLE9BQU9jLFdBQVdZLDZEQVE1QixJQUFBOEgsRUFBQTFLLEtBQ1h5QyxFQUFPekMsS0FBS2EsU0FBUzRCLEtBQUtrRSxZQUVoQ3lCLE9BQUFDLEVBQUk1RixJQUFNMkQsUUFBUSxTQUFBckQsR0FDWkEsRUFBSzRCLFVBQVV5QyxTQUFTc0QsRUFBS3hKLE9BQU9jLFdBQVdZLG9CQUNqRDhILEVBQUtwQyxvQkFBb0J2RiwyQ0FVaEJ4QyxFQUFTMkgsR0FBSyxJQUNuQnpGLEVBQVN6QyxLQUFLYSxTQUFkNEIsS0FDRmtJLEVBQVVwSyxFQUFRcUssVUFDbEJDLEVBQWF0SyxFQUFRcUssVUFBWXJLLEVBQVF1SyxhQUN6Q0MsRUFBWS9LLEtBQUthLFNBQVM0QixLQUFLc0ksVUFDL0JDLEVBQWFoTCxLQUFLYSxTQUFTNEIsS0FBS3FJLGFBRWxDNUMsRUFBTSxHQUFLMkMsRUFBYUcsRUFDMUJ2SSxFQUFLc0ksVUFBWUYsRUFBYUcsRUFDckI5QyxFQUFNLEdBQU04QyxFQUFhTCxFQUFVSyxFQUFhRCxJQUN6RHRJLEVBQUtzSSxVQUFZSixZQUt2QnBNLEVBQU9ELFFBQVVnQyxpU0N0dkJKMkssWUFBVSxTQUFBMUYsR0FDckIsT0FBT3JHLE9BQU9TLFVBQVV1TCxTQUFTdk0sS0FBSzRHLEdBQUs0RixNQUFNLEdBQUksR0FBR25DLGVBUzdDb0MsV0FBUyxTQUFDQyxFQUFHOUYsR0FDeEIsSUFBTStGLEVBQU9MLEVBQVExRixHQUNyQixZQUFlNUUsSUFBUjRFLEdBQTZCLE9BQVJBLEdBQWdCK0YsSUFBU0QsRUFBRXJDLGVBUTVDdEQsVUFBVSxTQUFBNEQsR0FDckIsSUFBTWlDLEVBQU16SyxTQUFTMEssY0FBYyxPQUVuQyxPQURBRCxFQUFJL0csVUFBWThFLEVBQUltQyxPQUNiRixFQUFJRyxZQVNBbkgsY0FBYyxTQUFDb0gsRUFBSUMsR0FDMUJSLEVBQU8sV0FBWU8sSUFDckJBLEVBQUdoTixLQUFLaU4sSUFXQ2pFLFdBQVcsU0FBQ2tFLEVBQUlDLEdBQzNCLEdBQWtCLGlCQUFkLElBQU9ELEVBQVAsWUFBQUUsRUFBT0YsS0FBd0MsaUJBQWRDLEVBQ3JDLE9BQU9ELEVBQUdsSCxVQUFVeUMsU0FBUzBFLElBUWxCM0ssU0FBUyxTQUFUQSxJQUFzQixRQUFBMkUsRUFBQXJGLFVBQUFDLE9BQVRxRixFQUFTQyxNQUFBRixHQUFBRyxFQUFBLEVBQUFBLEVBQUFILEVBQUFHLElBQVRGLEVBQVNFLEdBQUF4RixVQUFBd0YsR0FDakMsSUFBSStGLEtBb0JKLE9BTkFqRyxFQUFLSyxRQUFRLFNBQUFiLEdBQ1A2RixFQUFPLFNBQVU3RixJQWJYLFNBQUFBLEdBQ1YsSUFBSyxJQUFJMEcsS0FBUTFHLEVBQ1hyRyxPQUFPUyxVQUFVQyxlQUFlakIsS0FBSzRHLEVBQUswRyxLQUN4Q2IsRUFBTyxTQUFVN0YsRUFBSTBHLElBQ3ZCRCxFQUFTQyxHQUFROUssR0FBTyxFQUFNNkssRUFBU0MsR0FBTzFHLEVBQUkwRyxJQUVsREQsRUFBU0MsR0FBUTFHLEVBQUkwRyxJQVF6QkMsQ0FBTTNHLEtBSUh5RyxHQVNJakQsV0FBVyxTQUFBbkQsR0FDdEIsSUFBTXVHLEdBQ0pDLEdBQUksZ0ZBQWdGL0MsTUFBTSxPQUMxRmdELEdBQUksZ0ZBQWdGaEQsTUFBTSxPQUMxRmlELE1BQU8scUVBQXFFakQsTUFBTSxRQVk5RWtELEtBa0JOLE9BakJBM0csRUFBT0EsRUFBS29ELGdCQVRULEtBQU0sT0FDTixLQUFNLE9BQ04sUUFBUyxPQUNULEtBQU0sVUFDTixLQUFNLFFBQVMsS0FBTSxPQUNyQixRQUFTLEtBQU0sS0FBTSxPQU1iNUMsUUFBUSxTQUFBb0csR0FHakIsSUFGQSxJQUFJQyxFQUFNN0csRUFFRHBILEVBQUksRUFBR0EsRUFBSWdPLEVBQVE5TCxPQUFRbEMsR0FBSyxFQUl2QyxJQUhBLElBQU1rTyxFQUFPUCxFQUFTSyxFQUFRaE8sSUFDNUJtTyxFQUFLUixFQUFTSyxFQUFRaE8sRUFBSSxJQUVuQkEsRUFBSSxFQUFHa0MsRUFBU3lMLEVBQVNDLEdBQUcxTCxPQUFRbEMsRUFBSWtDLEVBQVFsQyxJQUN2RGlPLEVBQU1BLEVBQUlwRCxNQUFNcUQsRUFBS2xPLElBQUlpTSxLQUFLa0MsRUFBR25PLElBSXJDK04sRUFBUXBILEtBQUtzSCxLQUdSRiw4Q0N4SFQsSUFBQUssRUFBQUMsV0FFQSxTQUFBQyxLQVNBLFNBQUFDLEVBQUFwQixHQUNBLEtBQUEzTCxnQkFBQStNLEdBQ0EsVUFBQUMsVUFBQSx3Q0FDQSxzQkFBQXJCLEVBQUEsVUFBQXFCLFVBQUEsa0JBQ0FoTixLQUFBaU4sT0FBQSxFQUNBak4sS0FBQWtOLFVBQUEsRUFDQWxOLEtBQUFtTixZQUFBeE0sRUFDQVgsS0FBQW9OLGNBRUFDLEVBQUExQixFQUFBM0wsTUFHQSxTQUFBc04sRUFBQUMsRUFBQUMsR0FDQSxTQUFBRCxFQUFBTixRQUNBTSxJQUFBSixPQUVBLElBQUFJLEVBQUFOLFFBSUFNLEVBQUFMLFVBQUEsRUFDQUgsRUFBQVUsYUFBQSxXQUNBLElBQUFDLEVBQUEsSUFBQUgsRUFBQU4sT0FBQU8sRUFBQUcsWUFBQUgsRUFBQUksV0FDQSxVQUFBRixFQUFBLENBSUEsSUFBQUcsRUFDQSxJQUNBQSxFQUFBSCxFQUFBSCxFQUFBSixRQUNLLE1BQUFoTixHQUVMLFlBREEyTixFQUFBTixFQUFBTyxRQUFBNU4sR0FHQTZOLEVBQUFSLEVBQUFPLFFBQUFGLFFBVkEsSUFBQU4sRUFBQU4sT0FBQWUsRUFBQUYsR0FBQU4sRUFBQU8sUUFBQVIsRUFBQUosV0FQQUksRUFBQUgsV0FBQWpJLEtBQUFxSSxHQXFCQSxTQUFBUSxFQUFBVCxFQUFBVSxHQUNBLElBRUEsR0FBQUEsSUFBQVYsRUFDQSxVQUFBUCxVQUFBLDZDQUNBLEdBQ0FpQixJQUNBLGlCQUFBQSxHQUFBLG1CQUFBQSxHQUNBLENBQ0EsSUFBQTlELEVBQUE4RCxFQUFBOUQsS0FDQSxHQUFBOEQsYUFBQWxCLEVBSUEsT0FIQVEsRUFBQU4sT0FBQSxFQUNBTSxFQUFBSixPQUFBYyxPQUNBQyxFQUFBWCxHQUVPLHNCQUFBcEQsRUFFUCxZQURBa0QsR0E1REExQixFQTREQXhCLEVBNURBZ0UsRUE0REFGLEVBM0RBLFdBQ0F0QyxFQUFBekYsTUFBQWlJLEVBQUExTixhQTBEQThNLEdBSUFBLEVBQUFOLE9BQUEsRUFDQU0sRUFBQUosT0FBQWMsRUFDQUMsRUFBQVgsR0FDRyxNQUFBcE4sR0FDSDJOLEVBQUFQLEVBQUFwTixHQXBFQSxJQUFBd0wsRUFBQXdDLEVBd0VBLFNBQUFMLEVBQUFQLEVBQUFVLEdBQ0FWLEVBQUFOLE9BQUEsRUFDQU0sRUFBQUosT0FBQWMsRUFDQUMsRUFBQVgsR0FHQSxTQUFBVyxFQUFBWCxHQUNBLElBQUFBLEVBQUFOLFFBQUEsSUFBQU0sRUFBQUgsV0FBQTFNLFFBQ0FxTSxFQUFBVSxhQUFBLFdBQ0FGLEVBQUFMLFVBQ0FILEVBQUFxQixzQkFBQWIsRUFBQUosVUFLQSxRQUFBM08sRUFBQSxFQUFBNlAsRUFBQWQsRUFBQUgsV0FBQTFNLE9BQStDbEMsRUFBQTZQLEVBQVM3UCxJQUN4RDhPLEVBQUFDLElBQUFILFdBQUE1TyxJQUVBK08sRUFBQUgsV0FBQSxLQWVBLFNBQUFDLEVBQUExQixFQUFBNEIsR0FDQSxJQUFBZSxHQUFBLEVBQ0EsSUFDQTNDLEVBQ0EsU0FBQTFHLEdBQ0FxSixJQUNBQSxHQUFBLEVBQ0FOLEVBQUFULEVBQUF0SSxLQUVBLFNBQUFzSixHQUNBRCxJQUNBQSxHQUFBLEVBQ0FSLEVBQUFQLEVBQUFnQixNQUdHLE1BQUFDLEdBQ0gsR0FBQUYsRUFBQSxPQUNBQSxHQUFBLEVBQ0FSLEVBQUFQLEVBQUFpQixJQUlBekIsRUFBQXBOLFVBQUEsZUFBQWlPLEdBQ0EsT0FBQTVOLEtBQUFtSyxLQUFBLEtBQUF5RCxJQUdBYixFQUFBcE4sVUFBQXdLLEtBQUEsU0FBQXdELEVBQUFDLEdBQ0EsSUFBQWEsRUFBQSxJQUFBek8sS0FBQTBPLFlBQUE1QixHQUdBLE9BREFRLEVBQUF0TixLQUFBLElBekNBLFNBQUEyTixFQUFBQyxFQUFBRyxHQUNBL04sS0FBQTJOLFlBQUEsbUJBQUFBLElBQUEsS0FDQTNOLEtBQUE0TixXQUFBLG1CQUFBQSxJQUFBLEtBQ0E1TixLQUFBK04sVUFzQ0EsQ0FBQUosRUFBQUMsRUFBQWEsSUFDQUEsR0FHQTFCLEVBQUFwTixVQUFBLGlCQUFBZ1AsR0FDQSxJQUFBRCxFQUFBMU8sS0FBQTBPLFlBQ0EsT0FBQTFPLEtBQUFtSyxLQUNBLFNBQUFsRixHQUNBLE9BQUF5SixFQUFBVixRQUFBVyxLQUFBeEUsS0FBQSxXQUNBLE9BQUFsRixLQUdBLFNBQUFzSixHQUNBLE9BQUFHLEVBQUFWLFFBQUFXLEtBQUF4RSxLQUFBLFdBQ0EsT0FBQXVFLEVBQUFaLE9BQUFTLFFBTUF4QixFQUFBNkIsSUFBQSxTQUFBQyxHQUNBLFdBQUE5QixFQUFBLFNBQUFpQixFQUFBRixHQUNBLElBQUFlLFFBQUEsSUFBQUEsRUFBQW5PLE9BQ0EsVUFBQXNNLFVBQUEsZ0NBQ0EsSUFBQWpILEVBQUFDLE1BQUFyRyxVQUFBd0wsTUFBQXhNLEtBQUFrUSxHQUNBLE9BQUE5SSxFQUFBckYsT0FBQSxPQUFBc04sTUFDQSxJQUFBYyxFQUFBL0ksRUFBQXJGLE9BRUEsU0FBQStMLEVBQUFqTyxFQUFBdVEsR0FDQSxJQUNBLEdBQUFBLElBQUEsaUJBQUFBLEdBQUEsbUJBQUFBLEdBQUEsQ0FDQSxJQUFBNUUsRUFBQTRFLEVBQUE1RSxLQUNBLHNCQUFBQSxFQVFBLFlBUEFBLEVBQUF4TCxLQUNBb1EsRUFDQSxTQUFBQSxHQUNBdEMsRUFBQWpPLEVBQUF1USxJQUVBakIsR0FLQS9ILEVBQUF2SCxHQUFBdVEsRUFDQSxLQUFBRCxHQUNBZCxFQUFBakksR0FFTyxNQUFBeUksR0FDUFYsRUFBQVUsSUFJQSxRQUFBaFEsRUFBQSxFQUFtQkEsRUFBQXVILEVBQUFyRixPQUFpQmxDLElBQ3BDaU8sRUFBQWpPLEVBQUF1SCxFQUFBdkgsT0FLQXVPLEVBQUFpQixRQUFBLFNBQUEvSSxHQUNBLE9BQUFBLEdBQUEsaUJBQUFBLEtBQUF5SixjQUFBM0IsRUFDQTlILEVBR0EsSUFBQThILEVBQUEsU0FBQWlCLEdBQ0FBLEVBQUEvSSxNQUlBOEgsRUFBQWUsT0FBQSxTQUFBN0ksR0FDQSxXQUFBOEgsRUFBQSxTQUFBaUIsRUFBQUYsR0FDQUEsRUFBQTdJLE1BSUE4SCxFQUFBaUMsS0FBQSxTQUFBQyxHQUNBLFdBQUFsQyxFQUFBLFNBQUFpQixFQUFBRixHQUNBLFFBQUF0UCxFQUFBLEVBQUE2UCxFQUFBWSxFQUFBdk8sT0FBd0NsQyxFQUFBNlAsRUFBUzdQLElBQ2pEeVEsRUFBQXpRLEdBQUEyTCxLQUFBNkQsRUFBQUYsTUFNQWYsRUFBQVUsYUFDQSxtQkFBQXlCLEdBQ0EsU0FBQXZELEdBQ0F1RCxFQUFBdkQsS0FFQSxTQUFBQSxHQUNBaUIsRUFBQWpCLEVBQUEsSUFHQW9CLEVBQUFxQixzQkFBQSxTQUFBZSxHQUNBLG9CQUFBbk8sa0JBQ0FBLFFBQUFvTyxLQUFBLHdDQUFBRCxJQUlBNVEsRUFBQUQsUUFBQXlPLGdEQ2pQQSxTQUFBc0MsR0FBQSxJQUFBQyxPQUFBLElBQUFELE1BQ0Esb0JBQUE5QixZQUNBbk4sT0FDQThGLEVBQUFqRyxTQUFBTixVQUFBdUcsTUFpQkEsU0FBQXFKLEVBQUFySyxFQUFBc0ssR0FDQXhQLEtBQUF5UCxJQUFBdkssRUFDQWxGLEtBQUEwUCxTQUFBRixFQWZBbFIsRUFBQXVPLFdBQUEsV0FDQSxXQUFBMEMsRUFBQXJKLEVBQUF2SCxLQUFBa08sV0FBQXlDLEVBQUE3TyxXQUFBa1AsZUFFQXJSLEVBQUFzUixZQUFBLFdBQ0EsV0FBQUwsRUFBQXJKLEVBQUF2SCxLQUFBaVIsWUFBQU4sRUFBQTdPLFdBQUFvUCxnQkFFQXZSLEVBQUFxUixhQUNBclIsRUFBQXVSLGNBQUEsU0FBQUMsR0FDQUEsR0FDQUEsRUFBQUMsU0FRQVIsRUFBQTVQLFVBQUFxUSxNQUFBVCxFQUFBNVAsVUFBQXNRLElBQUEsYUFDQVYsRUFBQTVQLFVBQUFvUSxNQUFBLFdBQ0EvUCxLQUFBMFAsU0FBQS9RLEtBQUEyUSxFQUFBdFAsS0FBQXlQLE1BSUFuUixFQUFBNFIsT0FBQSxTQUFBbk4sRUFBQW9OLEdBQ0FSLGFBQUE1TSxFQUFBcU4sZ0JBQ0FyTixFQUFBc04sYUFBQUYsR0FHQTdSLEVBQUFnUyxTQUFBLFNBQUF2TixHQUNBNE0sYUFBQTVNLEVBQUFxTixnQkFDQXJOLEVBQUFzTixjQUFBLEdBR0EvUixFQUFBaVMsYUFBQWpTLEVBQUFrUyxPQUFBLFNBQUF6TixHQUNBNE0sYUFBQTVNLEVBQUFxTixnQkFFQSxJQUFBRCxFQUFBcE4sRUFBQXNOLGFBQ0FGLEdBQUEsSUFDQXBOLEVBQUFxTixlQUFBdkQsV0FBQSxXQUNBOUosRUFBQTBOLFlBQ0ExTixFQUFBME4sY0FDS04sS0FLTC9SLEVBQUEsR0FJQUUsRUFBQTRRLGFBQUEsb0JBQUEzQixXQUFBMkIsbUJBQ0EsSUFBQUcsS0FBQUgsY0FDQWxQLFdBQUFrUCxhQUNBNVEsRUFBQW9TLGVBQUEsb0JBQUFuRCxXQUFBbUQscUJBQ0EsSUFBQXJCLEtBQUFxQixnQkFDQTFRLFdBQUEwUSxnREM5REEsU0FBQXJCLEVBQUFzQixJQUFBLFNBQUF0QixFQUFBMU8sR0FDQSxhQUVBLElBQUEwTyxFQUFBSCxhQUFBLENBSUEsSUFJQTBCLEVBNkhBQyxFQVpBQyxFQXJCQUMsRUFDQUMsRUFqR0FDLEVBQUEsRUFDQUMsS0FDQUMsR0FBQSxFQUNBQyxFQUFBL0IsRUFBQXZPLFNBb0pBdVEsRUFBQW5TLE9BQUFvUyxnQkFBQXBTLE9BQUFvUyxlQUFBakMsR0FDQWdDLE9BQUF4RSxXQUFBd0UsRUFBQWhDLEVBR1Usd0JBQUFuRSxTQUFBdk0sS0FBQTBRLEVBQUFzQixTQXBGVkMsRUFBQSxTQUFBdEQsR0FDQXFELEVBQUFZLFNBQUEsV0FBMENDLEVBQUFsRSxPQUkxQyxXQUdBLEdBQUErQixFQUFBb0MsY0FBQXBDLEVBQUFxQyxjQUFBLENBQ0EsSUFBQUMsR0FBQSxFQUNBQyxFQUFBdkMsRUFBQXdDLFVBTUEsT0FMQXhDLEVBQUF3QyxVQUFBLFdBQ0FGLEdBQUEsR0FFQXRDLEVBQUFvQyxZQUFBLFFBQ0FwQyxFQUFBd0MsVUFBQUQsRUFDQUQsR0F3RUtHLEdBSUF6QyxFQUFBMEMsaUJBOUNMakIsRUFBQSxJQUFBaUIsZ0JBQ0FDLE1BQUFILFVBQUEsU0FBQUksR0FFQVQsRUFEQVMsRUFBQUMsT0FJQXRCLEVBQUEsU0FBQXRELEdBQ0F3RCxFQUFBcUIsTUFBQVYsWUFBQW5FLEtBMkNLOEQsR0FBQSx1QkFBQUEsRUFBQTVGLGNBQUEsV0F0Q0xxRixFQUFBTyxFQUFBZ0IsZ0JBQ0F4QixFQUFBLFNBQUF0RCxHQUdBLElBQUErRSxFQUFBakIsRUFBQTVGLGNBQUEsVUFDQTZHLEVBQUFDLG1CQUFBLFdBQ0FkLEVBQUFsRSxHQUNBK0UsRUFBQUMsbUJBQUEsS0FDQXpCLEVBQUEwQixZQUFBRixHQUNBQSxFQUFBLE1BRUF4QixFQUFBdEssWUFBQThMLEtBS0F6QixFQUFBLFNBQUF0RCxHQUNBVCxXQUFBMkUsRUFBQSxFQUFBbEUsS0FsREF5RCxFQUFBLGdCQUFBeUIsS0FBQUMsU0FBQSxJQUNBekIsRUFBQSxTQUFBaUIsR0FDQUEsRUFBQVMsU0FBQXJELEdBQ0EsaUJBQUE0QyxFQUFBQyxNQUNBLElBQUFELEVBQUFDLEtBQUF6TCxRQUFBc0ssSUFDQVMsR0FBQVMsRUFBQUMsS0FBQS9HLE1BQUE0RixFQUFBclEsVUFJQTJPLEVBQUFySSxpQkFDQXFJLEVBQUFySSxpQkFBQSxVQUFBZ0ssR0FBQSxHQUVBM0IsRUFBQXNELFlBQUEsWUFBQTNCLEdBR0FKLEVBQUEsU0FBQXRELEdBQ0ErQixFQUFBb0MsWUFBQVYsRUFBQXpELEVBQUEsT0FnRUErRCxFQUFBbkMsYUExS0EsU0FBQVAsR0FFQSxtQkFBQUEsSUFDQUEsRUFBQSxJQUFBMU8sU0FBQSxHQUFBME8sSUFJQSxJQURBLElBQUE1SSxFQUFBLElBQUFDLE1BQUF2RixVQUFBQyxPQUFBLEdBQ0FsQyxFQUFBLEVBQXFCQSxFQUFBdUgsRUFBQXJGLE9BQWlCbEMsSUFDdEN1SCxFQUFBdkgsR0FBQWlDLFVBQUFqQyxFQUFBLEdBR0EsSUFBQW9VLEdBQWtCakUsV0FBQTVJLFFBR2xCLE9BRkFtTCxFQUFBRCxHQUFBMkIsRUFDQWhDLEVBQUFLLEdBQ0FBLEtBNkpBSSxFQUFBWCxpQkExSkEsU0FBQUEsRUFBQXBELFVBQ0E0RCxFQUFBNUQsR0F5QkEsU0FBQWtFLEVBQUFsRSxHQUdBLEdBQUE2RCxFQUdBdEUsV0FBQTJFLEVBQUEsRUFBQWxFLE9BQ1MsQ0FDVCxJQUFBc0YsRUFBQTFCLEVBQUE1RCxHQUNBLEdBQUFzRixFQUFBLENBQ0F6QixHQUFBLEVBQ0EsS0FqQ0EsU0FBQXlCLEdBQ0EsSUFBQWpFLEVBQUFpRSxFQUFBakUsU0FDQTVJLEVBQUE2TSxFQUFBN00sS0FDQSxPQUFBQSxFQUFBckYsUUFDQSxPQUNBaU8sSUFDQSxNQUNBLE9BQ0FBLEVBQUE1SSxFQUFBLElBQ0EsTUFDQSxPQUNBNEksRUFBQTVJLEVBQUEsR0FBQUEsRUFBQSxJQUNBLE1BQ0EsT0FDQTRJLEVBQUE1SSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNBLE1BQ0EsUUFDQTRJLEVBQUF6SSxNQUFBdkYsRUFBQW9GLElBaUJBOE0sQ0FBQUQsR0FDaUIsUUFDakJsQyxFQUFBcEQsR0FDQTZELEdBQUEsTUF2RUEsQ0F5TEMsb0JBQUE1RCxVQUFBLElBQUE4QixFQUFBclAsS0FBQXFQLEVBQUE5Qix5Q0N4TEQsSUFPQXVGLEVBQ0FDLEVBUkFwQyxFQUFBcFMsRUFBQUQsV0FVQSxTQUFBMFUsSUFDQSxVQUFBQyxNQUFBLG1DQUVBLFNBQUFDLElBQ0EsVUFBQUQsTUFBQSxxQ0FzQkEsU0FBQUUsRUFBQUMsR0FDQSxHQUFBTixJQUFBakcsV0FFQSxPQUFBQSxXQUFBdUcsRUFBQSxHQUdBLElBQUFOLElBQUFFLElBQUFGLElBQUFqRyxXQUVBLE9BREFpRyxFQUFBakcsV0FDQUEsV0FBQXVHLEVBQUEsR0FFQSxJQUVBLE9BQUFOLEVBQUFNLEVBQUEsR0FDSyxNQUFBalQsR0FDTCxJQUVBLE9BQUEyUyxFQUFBblUsS0FBQSxLQUFBeVUsRUFBQSxHQUNTLE1BQUFqVCxHQUVULE9BQUEyUyxFQUFBblUsS0FBQXFCLEtBQUFvVCxFQUFBLE1BdkNBLFdBQ0EsSUFFQU4sRUFEQSxtQkFBQWpHLFdBQ0FBLFdBRUFtRyxFQUVLLE1BQUE3UyxHQUNMMlMsRUFBQUUsRUFFQSxJQUVBRCxFQURBLG1CQUFBcEQsYUFDQUEsYUFFQXVELEVBRUssTUFBQS9TLEdBQ0w0UyxFQUFBRyxHQWpCQSxHQXdFQSxJQUVBRyxFQUZBQyxLQUNBQyxHQUFBLEVBRUFDLEdBQUEsRUFFQSxTQUFBQyxJQUNBRixHQUFBRixJQUdBRSxHQUFBLEVBQ0FGLEVBQUEzUyxPQUNBNFMsRUFBQUQsRUFBQWpMLE9BQUFrTCxHQUVBRSxHQUFBLEVBRUFGLEVBQUE1UyxRQUNBZ1QsS0FJQSxTQUFBQSxJQUNBLElBQUFILEVBQUEsQ0FHQSxJQUFBekQsRUFBQXFELEVBQUFNLEdBQ0FGLEdBQUEsRUFHQSxJQURBLElBQUFsRixFQUFBaUYsRUFBQTVTLE9BQ0EyTixHQUFBLENBR0EsSUFGQWdGLEVBQUFDLEVBQ0FBLE9BQ0FFLEVBQUFuRixHQUNBZ0YsR0FDQUEsRUFBQUcsR0FBQVgsTUFHQVcsR0FBQSxFQUNBbkYsRUFBQWlGLEVBQUE1UyxPQUVBMlMsRUFBQSxLQUNBRSxHQUFBLEVBbkVBLFNBQUFJLEdBQ0EsR0FBQVosSUFBQXBELGFBRUEsT0FBQUEsYUFBQWdFLEdBR0EsSUFBQVosSUFBQUcsSUFBQUgsSUFBQXBELGFBRUEsT0FEQW9ELEVBQUFwRCxhQUNBQSxhQUFBZ0UsR0FFQSxJQUVBWixFQUFBWSxHQUNLLE1BQUF4VCxHQUNMLElBRUEsT0FBQTRTLEVBQUFwVSxLQUFBLEtBQUFnVixHQUNTLE1BQUF4VCxHQUdULE9BQUE0UyxFQUFBcFUsS0FBQXFCLEtBQUEyVCxLQWdEQUMsQ0FBQTlELElBaUJBLFNBQUErRCxFQUFBVCxFQUFBVSxHQUNBOVQsS0FBQW9ULE1BQ0FwVCxLQUFBOFQsUUFZQSxTQUFBaEgsS0E1QkE2RCxFQUFBWSxTQUFBLFNBQUE2QixHQUNBLElBQUFyTixFQUFBLElBQUFDLE1BQUF2RixVQUFBQyxPQUFBLEdBQ0EsR0FBQUQsVUFBQUMsT0FBQSxFQUNBLFFBQUFsQyxFQUFBLEVBQXVCQSxFQUFBaUMsVUFBQUMsT0FBc0JsQyxJQUM3Q3VILEVBQUF2SCxFQUFBLEdBQUFpQyxVQUFBakMsR0FHQThVLEVBQUFuTyxLQUFBLElBQUEwTyxFQUFBVCxFQUFBck4sSUFDQSxJQUFBdU4sRUFBQTVTLFFBQUE2UyxHQUNBSixFQUFBTyxJQVNBRyxFQUFBbFUsVUFBQWtULElBQUEsV0FDQTdTLEtBQUFvVCxJQUFBbE4sTUFBQSxLQUFBbEcsS0FBQThULFFBRUFuRCxFQUFBb0QsTUFBQSxVQUNBcEQsRUFBQXFELFNBQUEsRUFDQXJELEVBQUFzRCxPQUNBdEQsRUFBQXVELFFBQ0F2RCxFQUFBd0QsUUFBQSxHQUNBeEQsRUFBQXlELFlBSUF6RCxFQUFBMEQsR0FBQXZILEVBQ0E2RCxFQUFBMkQsWUFBQXhILEVBQ0E2RCxFQUFBNEQsS0FBQXpILEVBQ0E2RCxFQUFBNkQsSUFBQTFILEVBQ0E2RCxFQUFBOEQsZUFBQTNILEVBQ0E2RCxFQUFBK0QsbUJBQUE1SCxFQUNBNkQsRUFBQWdFLEtBQUE3SCxFQUNBNkQsRUFBQWlFLGdCQUFBOUgsRUFDQTZELEVBQUFrRSxvQkFBQS9ILEVBRUE2RCxFQUFBbUUsVUFBQSxTQUFBL1YsR0FBcUMsVUFFckM0UixFQUFBb0UsUUFBQSxTQUFBaFcsR0FDQSxVQUFBa1UsTUFBQSxxQ0FHQXRDLEVBQUFxRSxJQUFBLFdBQTJCLFdBQzNCckUsRUFBQXNFLE1BQUEsU0FBQS9NLEdBQ0EsVUFBQStLLE1BQUEsbUNBRUF0QyxFQUFBdUUsTUFBQSxXQUE0QiwwQkN2TDVCLFNBQUEzSCxHQUNBLGFBRUEsSUFBQUEsRUFBQTVELE1BQUEsQ0FJQSxJQUFBd0wsR0FDQUMsYUFBQSxvQkFBQTdILEVBQ0E4SCxTQUFBLFdBQUE5SCxHQUFBLGFBQUErSCxPQUNBQyxLQUFBLGVBQUFoSSxHQUFBLFNBQUFBLEdBQUEsV0FDQSxJQUVBLE9BREEsSUFBQWlJLE1BQ0EsRUFDTyxNQUFBclYsR0FDUCxVQUxBLEdBUUFzVixTQUFBLGFBQUFsSSxFQUNBbUksWUFBQSxnQkFBQW5JLEdBR0EsR0FBQTRILEVBQUFPLFlBQ0EsSUFBQUMsR0FDQSxxQkFDQSxzQkFDQSw2QkFDQSxzQkFDQSx1QkFDQSxzQkFDQSx1QkFDQSx3QkFDQSx5QkFHQUMsRUFBQSxTQUFBclEsR0FDQSxPQUFBQSxHQUFBc1EsU0FBQWxXLFVBQUFtVyxjQUFBdlEsSUFHQXdRLEVBQUFDLFlBQUFDLFFBQUEsU0FBQTFRLEdBQ0EsT0FBQUEsR0FBQW9RLEVBQUFsUCxRQUFBdkgsT0FBQVMsVUFBQXVMLFNBQUF2TSxLQUFBNEcsS0FBQSxHQXlEQTJRLEVBQUF2VyxVQUFBK0csT0FBQSxTQUFBM0gsRUFBQWtHLEdBQ0FsRyxFQUFBb1gsRUFBQXBYLEdBQ0FrRyxFQUFBbVIsRUFBQW5SLEdBQ0EsSUFBQW9SLEVBQUFyVyxLQUFBc1csSUFBQXZYLEdBQ0FpQixLQUFBc1csSUFBQXZYLEdBQUFzWCxJQUFBLElBQUFwUixLQUdBaVIsRUFBQXZXLFVBQUEsZ0JBQUFaLFVBQ0FpQixLQUFBc1csSUFBQUgsRUFBQXBYLEtBR0FtWCxFQUFBdlcsVUFBQUwsSUFBQSxTQUFBUCxHQUVBLE9BREFBLEVBQUFvWCxFQUFBcFgsR0FDQWlCLEtBQUF1VyxJQUFBeFgsR0FBQWlCLEtBQUFzVyxJQUFBdlgsR0FBQSxNQUdBbVgsRUFBQXZXLFVBQUE0VyxJQUFBLFNBQUF4WCxHQUNBLE9BQUFpQixLQUFBc1csSUFBQTFXLGVBQUF1VyxFQUFBcFgsS0FHQW1YLEVBQUF2VyxVQUFBNlcsSUFBQSxTQUFBelgsRUFBQWtHLEdBQ0FqRixLQUFBc1csSUFBQUgsRUFBQXBYLElBQUFxWCxFQUFBblIsSUFHQWlSLEVBQUF2VyxVQUFBeUcsUUFBQSxTQUFBdUksRUFBQVIsR0FDQSxRQUFBcFAsS0FBQWlCLEtBQUFzVyxJQUNBdFcsS0FBQXNXLElBQUExVyxlQUFBYixJQUNBNFAsRUFBQWhRLEtBQUF3UCxFQUFBbk8sS0FBQXNXLElBQUF2WCxLQUFBaUIsT0FLQWtXLEVBQUF2VyxVQUFBOFcsS0FBQSxXQUNBLElBQUFyVixLQUVBLE9BREFwQixLQUFBb0csUUFBQSxTQUFBbkIsRUFBQWxHLEdBQXdDcUMsRUFBQStELEtBQUFwRyxLQUN4QzJYLEVBQUF0VixJQUdBOFUsRUFBQXZXLFVBQUFzUCxPQUFBLFdBQ0EsSUFBQTdOLEtBRUEsT0FEQXBCLEtBQUFvRyxRQUFBLFNBQUFuQixHQUFrQzdELEVBQUErRCxLQUFBRixLQUNsQ3lSLEVBQUF0VixJQUdBOFUsRUFBQXZXLFVBQUFnWCxRQUFBLFdBQ0EsSUFBQXZWLEtBRUEsT0FEQXBCLEtBQUFvRyxRQUFBLFNBQUFuQixFQUFBbEcsR0FBd0NxQyxFQUFBK0QsTUFBQXBHLEVBQUFrRyxNQUN4Q3lSLEVBQUF0VixJQUdBK1QsRUFBQUUsV0FDQWEsRUFBQXZXLFVBQUEyVixPQUFBc0IsVUFBQVYsRUFBQXZXLFVBQUFnWCxTQXFKQSxJQUFBRSxHQUFBLDhDQTRDQUMsRUFBQW5YLFVBQUFvWCxNQUFBLFdBQ0EsV0FBQUQsRUFBQTlXLE1BQThCK0osS0FBQS9KLEtBQUFnWCxhQWdDOUJDLEVBQUF0WSxLQUFBbVksRUFBQW5YLFdBZ0JBc1gsRUFBQXRZLEtBQUF1WSxFQUFBdlgsV0FFQXVYLEVBQUF2WCxVQUFBb1gsTUFBQSxXQUNBLFdBQUFHLEVBQUFsWCxLQUFBZ1gsV0FDQTNNLE9BQUFySyxLQUFBcUssT0FDQThNLFdBQUFuWCxLQUFBbVgsV0FDQXROLFFBQUEsSUFBQXFNLEVBQUFsVyxLQUFBNkosU0FDQWxJLElBQUEzQixLQUFBMkIsT0FJQXVWLEVBQUFqVyxNQUFBLFdBQ0EsSUFBQW1KLEVBQUEsSUFBQThNLEVBQUEsTUFBdUM3TSxPQUFBLEVBQUE4TSxXQUFBLEtBRXZDLE9BREEvTSxFQUFBa0IsS0FBQSxRQUNBbEIsR0FHQSxJQUFBZ04sR0FBQSxxQkFFQUYsRUFBQUcsU0FBQSxTQUFBMVYsRUFBQTBJLEdBQ0EsUUFBQStNLEVBQUEzUSxRQUFBNEQsR0FDQSxVQUFBaU4sV0FBQSx1QkFHQSxXQUFBSixFQUFBLE1BQStCN00sU0FBQVIsU0FBMEIwTixTQUFBNVYsTUFHekQ0TCxFQUFBMkksVUFDQTNJLEVBQUF1SixVQUNBdkosRUFBQTJKLFdBRUEzSixFQUFBNUQsTUFBQSxTQUFBcEgsRUFBQTBCLEdBQ0EsV0FBQThJLFFBQUEsU0FBQWlCLEVBQUFGLEdBQ0EsSUFBQTBKLEVBQUEsSUFBQVYsRUFBQXZVLEVBQUEwQixHQUNBd1QsRUFBQSxJQUFBQyxlQUVBRCxFQUFBRSxPQUFBLFdBQ0EsSUFyRUFDLEVBQ0EvTixFQW9FQWdPLEdBQ0F4TixPQUFBb04sRUFBQXBOLE9BQ0E4TSxXQUFBTSxFQUFBTixXQUNBdE4sU0F4RUErTixFQXdFQUgsRUFBQUsseUJBQUEsR0F2RUFqTyxFQUFBLElBQUFxTSxFQUdBMEIsRUFBQUcsUUFBQSxvQkFDQTFPLE1BQUEsU0FBQWpELFFBQUEsU0FBQTRSLEdBQ0EsSUFBQUMsRUFBQUQsRUFBQTNPLE1BQUEsS0FDQTZPLEVBQUFELEVBQUFFLFFBQUExTSxPQUNBLEdBQUF5TSxFQUFBLENBQ0EsSUFBQWpULEVBQUFnVCxFQUFBeE4sS0FBQSxLQUFBZ0IsT0FDQTVCLEVBQUFuRCxPQUFBd1IsRUFBQWpULE1BR0E0RSxJQTZEQWdPLEVBQUFsVyxJQUFBLGdCQUFBOFYsSUFBQVcsWUFBQVAsRUFBQWhPLFFBQUF2SyxJQUFBLGlCQUNBLElBQUF5SyxFQUFBLGFBQUEwTixJQUFBck4sU0FBQXFOLEVBQUFZLGFBQ0FySyxFQUFBLElBQUFrSixFQUFBbk4sRUFBQThOLEtBR0FKLEVBQUFhLFFBQUEsV0FDQXhLLEVBQUEsSUFBQWQsVUFBQSw0QkFHQXlLLEVBQUFjLFVBQUEsV0FDQXpLLEVBQUEsSUFBQWQsVUFBQSw0QkFHQXlLLEVBQUFlLEtBQUFoQixFQUFBNU4sT0FBQTROLEVBQUE3VixLQUFBLEdBRUEsWUFBQTZWLEVBQUFpQixZQUNBaEIsRUFBQWlCLGlCQUFBLEVBQ08sU0FBQWxCLEVBQUFpQixjQUNQaEIsRUFBQWlCLGlCQUFBLEdBR0EsaUJBQUFqQixHQUFBdEMsRUFBQUksT0FDQWtDLEVBQUFrQixhQUFBLFFBR0FuQixFQUFBM04sUUFBQXpELFFBQUEsU0FBQW5CLEVBQUFsRyxHQUNBMFksRUFBQW1CLGlCQUFBN1osRUFBQWtHLEtBR0F3UyxFQUFBb0IsVUFBQSxJQUFBckIsRUFBQVIsVUFBQSxLQUFBUSxFQUFBUixjQUdBekosRUFBQTVELE1BQUFtUCxVQUFBLEVBcGFBLFNBQUEzQyxFQUFBcFgsR0FJQSxHQUhBLGlCQUFBQSxJQUNBQSxFQUFBZ2EsT0FBQWhhLElBRUEsNkJBQUFpYSxLQUFBamEsR0FDQSxVQUFBaU8sVUFBQSwwQ0FFQSxPQUFBak8sRUFBQWlLLGNBR0EsU0FBQW9OLEVBQUFuUixHQUlBLE1BSEEsaUJBQUFBLElBQ0FBLEVBQUE4VCxPQUFBOVQsSUFFQUEsRUFJQSxTQUFBeVIsRUFBQXRWLEdBQ0EsSUFBQXdWLEdBQ0FxQyxLQUFBLFdBQ0EsSUFBQWhVLEVBQUE3RCxFQUFBK1csUUFDQSxPQUFnQjdKLFVBQUEzTixJQUFBc0UsYUFVaEIsT0FOQWtRLEVBQUFFLFdBQ0F1QixFQUFBdEIsT0FBQXNCLFVBQUEsV0FDQSxPQUFBQSxJQUlBQSxFQUdBLFNBQUFWLEVBQUFyTSxHQUNBN0osS0FBQXNXLE9BRUF6TSxhQUFBcU0sRUFDQXJNLEVBQUF6RCxRQUFBLFNBQUFuQixFQUFBbEcsR0FDQWlCLEtBQUEwRyxPQUFBM0gsRUFBQWtHLElBQ09qRixNQUNGZ0csTUFBQWtULFFBQUFyUCxHQUNMQSxFQUFBekQsUUFBQSxTQUFBK1MsR0FDQW5aLEtBQUEwRyxPQUFBeVMsRUFBQSxHQUFBQSxFQUFBLEtBQ09uWixNQUNGNkosR0FDTDNLLE9BQUFrYSxvQkFBQXZQLEdBQUF6RCxRQUFBLFNBQUFySCxHQUNBaUIsS0FBQTBHLE9BQUEzSCxFQUFBOEssRUFBQTlLLEtBQ09pQixNQTBEUCxTQUFBcVosRUFBQXRQLEdBQ0EsR0FBQUEsRUFBQXVQLFNBQ0EsT0FBQXZNLFFBQUFlLE9BQUEsSUFBQWQsVUFBQSxpQkFFQWpELEVBQUF1UCxVQUFBLEVBR0EsU0FBQUMsRUFBQUMsR0FDQSxXQUFBek0sUUFBQSxTQUFBaUIsRUFBQUYsR0FDQTBMLEVBQUE3QixPQUFBLFdBQ0EzSixFQUFBd0wsRUFBQXZRLFNBRUF1USxFQUFBbEIsUUFBQSxXQUNBeEssRUFBQTBMLEVBQUF2WSxVQUtBLFNBQUF3WSxFQUFBbEUsR0FDQSxJQUFBaUUsRUFBQSxJQUFBRSxXQUNBM0wsRUFBQXdMLEVBQUFDLEdBRUEsT0FEQUEsRUFBQUcsa0JBQUFwRSxHQUNBeEgsRUFvQkEsU0FBQTZMLEVBQUFDLEdBQ0EsR0FBQUEsRUFBQTFPLE1BQ0EsT0FBQTBPLEVBQUExTyxNQUFBLEdBRUEsSUFBQTJPLEVBQUEsSUFBQUMsV0FBQUYsRUFBQUcsWUFFQSxPQURBRixFQUFBdEQsSUFBQSxJQUFBdUQsV0FBQUYsSUFDQUMsRUFBQUcsT0FJQSxTQUFBaEQsSUEwRkEsT0F6RkFqWCxLQUFBc1osVUFBQSxFQUVBdFosS0FBQWthLFVBQUEsU0FBQW5RLEdBRUEsR0FEQS9KLEtBQUFnWCxVQUFBak4sRUFDQUEsRUFFTyxvQkFBQUEsRUFDUC9KLEtBQUFtYSxVQUFBcFEsT0FDTyxHQUFBb0wsRUFBQUksTUFBQUMsS0FBQTdWLFVBQUFtVyxjQUFBL0wsR0FDUC9KLEtBQUFvYSxVQUFBclEsT0FDTyxHQUFBb0wsRUFBQU0sVUFBQTRFLFNBQUExYSxVQUFBbVcsY0FBQS9MLEdBQ1AvSixLQUFBc2EsY0FBQXZRLE9BQ08sR0FBQW9MLEVBQUFDLGNBQUFtRixnQkFBQTVhLFVBQUFtVyxjQUFBL0wsR0FDUC9KLEtBQUFtYSxVQUFBcFEsRUFBQW1CLGdCQUNPLEdBQUFpSyxFQUFBTyxhQUFBUCxFQUFBSSxNQUFBSyxFQUFBN0wsR0FDUC9KLEtBQUF3YSxpQkFBQVosRUFBQTdQLEVBQUFrUSxRQUVBamEsS0FBQWdYLFVBQUEsSUFBQXhCLE1BQUF4VixLQUFBd2EsdUJBQ08sS0FBQXJGLEVBQUFPLGNBQUFNLFlBQUFyVyxVQUFBbVcsY0FBQS9MLEtBQUFnTSxFQUFBaE0sR0FHUCxVQUFBa0osTUFBQSw2QkFGQWpULEtBQUF3YSxpQkFBQVosRUFBQTdQLFFBZEEvSixLQUFBbWEsVUFBQSxHQW1CQW5hLEtBQUE2SixRQUFBdkssSUFBQSxrQkFDQSxpQkFBQXlLLEVBQ0EvSixLQUFBNkosUUFBQTJNLElBQUEsMkNBQ1N4VyxLQUFBb2EsV0FBQXBhLEtBQUFvYSxVQUFBOU8sS0FDVHRMLEtBQUE2SixRQUFBMk0sSUFBQSxlQUFBeFcsS0FBQW9hLFVBQUE5TyxNQUNTNkosRUFBQUMsY0FBQW1GLGdCQUFBNWEsVUFBQW1XLGNBQUEvTCxJQUNUL0osS0FBQTZKLFFBQUEyTSxJQUFBLG9FQUtBckIsRUFBQUksT0FDQXZWLEtBQUF1VixLQUFBLFdBQ0EsSUFBQWtGLEVBQUFwQixFQUFBclosTUFDQSxHQUFBeWEsRUFDQSxPQUFBQSxFQUdBLEdBQUF6YSxLQUFBb2EsVUFDQSxPQUFBck4sUUFBQWlCLFFBQUFoTyxLQUFBb2EsV0FDUyxHQUFBcGEsS0FBQXdhLGlCQUNULE9BQUF6TixRQUFBaUIsUUFBQSxJQUFBd0gsTUFBQXhWLEtBQUF3YSxvQkFDUyxHQUFBeGEsS0FBQXNhLGNBQ1QsVUFBQXJILE1BQUEsd0NBRUEsT0FBQWxHLFFBQUFpQixRQUFBLElBQUF3SCxNQUFBeFYsS0FBQW1hLGNBSUFuYSxLQUFBMFYsWUFBQSxXQUNBLE9BQUExVixLQUFBd2EsaUJBQ0FuQixFQUFBclosT0FBQStNLFFBQUFpQixRQUFBaE8sS0FBQXdhLGtCQUVBeGEsS0FBQXVWLE9BQUFwTCxLQUFBc1AsS0FLQXpaLEtBQUE0RixLQUFBLFdBQ0EsSUEzRkEyUCxFQUNBaUUsRUFDQXpMLEVBeUZBME0sRUFBQXBCLEVBQUFyWixNQUNBLEdBQUF5YSxFQUNBLE9BQUFBLEVBR0EsR0FBQXphLEtBQUFvYSxVQUNBLE9BakdBN0UsRUFpR0F2VixLQUFBb2EsVUFoR0FaLEVBQUEsSUFBQUUsV0FDQTNMLEVBQUF3TCxFQUFBQyxHQUNBQSxFQUFBa0IsV0FBQW5GLEdBQ0F4SCxFQThGTyxHQUFBL04sS0FBQXdhLGlCQUNQLE9BQUF6TixRQUFBaUIsUUE1RkEsU0FBQTZMLEdBSUEsSUFIQSxJQUFBQyxFQUFBLElBQUFDLFdBQUFGLEdBQ0FjLEVBQUEsSUFBQTNVLE1BQUE4VCxFQUFBcFosUUFFQWxDLEVBQUEsRUFBbUJBLEVBQUFzYixFQUFBcFosT0FBaUJsQyxJQUNwQ21jLEVBQUFuYyxHQUFBdWEsT0FBQTZCLGFBQUFkLEVBQUF0YixJQUVBLE9BQUFtYyxFQUFBbFEsS0FBQSxJQXFGQW9RLENBQUE3YSxLQUFBd2EsbUJBQ08sR0FBQXhhLEtBQUFzYSxjQUNQLFVBQUFySCxNQUFBLHdDQUVBLE9BQUFsRyxRQUFBaUIsUUFBQWhPLEtBQUFtYSxZQUlBaEYsRUFBQU0sV0FDQXpWLEtBQUF5VixTQUFBLFdBQ0EsT0FBQXpWLEtBQUE0RixPQUFBdUUsS0FBQTJRLEtBSUE5YSxLQUFBc0ssS0FBQSxXQUNBLE9BQUF0SyxLQUFBNEYsT0FBQXVFLEtBQUFILEtBQUErUSxRQUdBL2EsS0FXQSxTQUFBOFcsRUFBQXZVLEVBQUFzVixHQUVBLElBUEFqTyxFQUNBb1IsRUFNQWpSLEdBREE4TixTQUNBOU4sS0FFQSxHQUFBeEgsYUFBQXVVLEVBQUEsQ0FDQSxHQUFBdlUsRUFBQStXLFNBQ0EsVUFBQXRNLFVBQUEsZ0JBRUFoTixLQUFBMkIsSUFBQVksRUFBQVosSUFDQTNCLEtBQUF5WSxZQUFBbFcsRUFBQWtXLFlBQ0FaLEVBQUFoTyxVQUNBN0osS0FBQTZKLFFBQUEsSUFBQXFNLEVBQUEzVCxFQUFBc0gsVUFFQTdKLEtBQUE0SixPQUFBckgsRUFBQXFILE9BQ0E1SixLQUFBaWIsS0FBQTFZLEVBQUEwWSxLQUNBbFIsR0FBQSxNQUFBeEgsRUFBQXlVLFlBQ0FqTixFQUFBeEgsRUFBQXlVLFVBQ0F6VSxFQUFBK1csVUFBQSxRQUdBdFosS0FBQTJCLElBQUFvWCxPQUFBeFcsR0FXQSxHQVJBdkMsS0FBQXlZLFlBQUFaLEVBQUFZLGFBQUF6WSxLQUFBeVksYUFBQSxRQUNBWixFQUFBaE8sU0FBQTdKLEtBQUE2SixVQUNBN0osS0FBQTZKLFFBQUEsSUFBQXFNLEVBQUEyQixFQUFBaE8sVUFFQTdKLEtBQUE0SixRQWhDQUEsRUFnQ0FpTyxFQUFBak8sUUFBQTVKLEtBQUE0SixRQUFBLE1BL0JBb1IsRUFBQXBSLEVBQUFzUixjQUNBckUsRUFBQXBRLFFBQUF1VSxJQUFBLEVBQUFBLEVBQUFwUixHQStCQTVKLEtBQUFpYixLQUFBcEQsRUFBQW9ELE1BQUFqYixLQUFBaWIsTUFBQSxLQUNBamIsS0FBQW1iLFNBQUEsTUFFQSxRQUFBbmIsS0FBQTRKLFFBQUEsU0FBQTVKLEtBQUE0SixTQUFBRyxFQUNBLFVBQUFpRCxVQUFBLDZDQUVBaE4sS0FBQWthLFVBQUFuUSxHQU9BLFNBQUErUSxFQUFBL1EsR0FDQSxJQUFBcVIsRUFBQSxJQUFBZixTQVNBLE9BUkF0USxFQUFBMEIsT0FBQXBDLE1BQUEsS0FBQWpELFFBQUEsU0FBQWlWLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLElBQUFoUyxFQUFBZ1MsRUFBQWhTLE1BQUEsS0FDQXRLLEVBQUFzSyxFQUFBOE8sUUFBQUosUUFBQSxXQUNBOVMsRUFBQW9FLEVBQUFvQixLQUFBLEtBQUFzTixRQUFBLFdBQ0FxRCxFQUFBMVUsT0FBQTRVLG1CQUFBdmMsR0FBQXVjLG1CQUFBclcsT0FHQW1XLEVBcUJBLFNBQUFsRSxFQUFBcUUsRUFBQTFELEdBQ0FBLElBQ0FBLE1BR0E3WCxLQUFBc0wsS0FBQSxVQUNBdEwsS0FBQXFLLFlBQUExSixJQUFBa1gsRUFBQXhOLE9BQUEsSUFBQXdOLEVBQUF4TixPQUNBckssS0FBQXdiLEdBQUF4YixLQUFBcUssUUFBQSxLQUFBckssS0FBQXFLLE9BQUEsSUFDQXJLLEtBQUFtWCxXQUFBLGVBQUFVLElBQUFWLFdBQUEsS0FDQW5YLEtBQUE2SixRQUFBLElBQUFxTSxFQUFBMkIsRUFBQWhPLFNBQ0E3SixLQUFBMkIsSUFBQWtXLEVBQUFsVyxLQUFBLEdBQ0EzQixLQUFBa2EsVUFBQXFCLElBbllBLENBaWRDLG9CQUFBaE8sVUFBQXZOLG9DQzlaRCxJQUFXRyxHQTVCUHNiLFFBQVE5YixVQUFXK2IsU0FBUy9iLFVBQVdnYyxpQkFBaUJoYyxXQXJCdER5RyxRQUFRLFNBQVVyRCxHQUNoQkEsRUFBS25ELGVBQWUsV0FHeEJWLE9BQU9DLGVBQWU0RCxFQUFNLFVBQzFCM0QsY0FBYyxFQUNkQyxZQUFZLEVBQ1p1YyxVQUFVLEVBQ1YzVyxNQUFPLFdBQ0wsSUFBSTRXLEVBQVM3VixNQUFNckcsVUFBVXdMLE1BQU14TSxLQUFLOEIsV0FDdENxYixFQUFVaGIsU0FBU2liLHlCQUVyQkYsRUFBT3pWLFFBQVEsU0FBVTRWLEdBQ3ZCLElBQUlDLEVBQVNELGFBQW1CRSxLQUNoQ0osRUFBUXZWLFlBQVkwVixFQUFTRCxFQUFVbGIsU0FBU3FiLGVBQWVwRCxPQUFPaUQsT0FHeEVoYyxLQUFLdUcsWUFBWXVWLFNBNkJyQkwsUUFBUTliLFVBQVcrYixTQUFTL2IsVUFBV2djLGlCQUFpQmhjLFdBckJ0RHlHLFFBQVEsU0FBVXJELEdBQ2hCQSxFQUFLbkQsZUFBZSxZQUd4QlYsT0FBT0MsZUFBZTRELEVBQU0sV0FDMUIzRCxjQUFjLEVBQ2RDLFlBQVksRUFDWnVjLFVBQVUsRUFDVjNXLE1BQU8sV0FDTCxJQUFJNFcsRUFBUzdWLE1BQU1yRyxVQUFVd0wsTUFBTXhNLEtBQUs4QixXQUN0Q3FiLEVBQVVoYixTQUFTaWIseUJBRXJCRixFQUFPelYsUUFBUSxTQUFVNFYsR0FDdkIsSUFBSUMsRUFBU0QsYUFBbUJFLEtBQ2hDSixFQUFRdlYsWUFBWTBWLEVBQVNELEVBQVVsYixTQUFTcWIsZUFBZXBELE9BQU9pRCxPQUd4RWhjLEtBQUtvYyxhQUFhTixFQUFTOWIsS0FBSzBMLGtCQU83QnZMLEVBVVJzYixRQUFROWIsV0FUUDRILFFBQVVwSCxFQUFFb0gsU0FBVyxTQUFVOFUsR0FHakMsSUFGQSxJQUFJQyxFQUFPdGMsS0FFSnNjLEdBQU0sQ0FDWCxHQUFJQSxFQUFLQyxRQUFRRixHQUFNLE9BQU9DLEVBQ3pCQSxFQUFPQSxFQUFLRSxjQUVuQixPQUFPLE1BS1gsU0FBV3JjLEdBQ1QsSUFBSW9jLEVBQVVwYyxFQUFFb2MsU0FBV3BjLEVBQUVzYyxpQkFBbUJ0YyxFQUFFdWMsdUJBQXlCdmMsRUFBRXdjLG9CQUFzQnhjLEVBQUV5YyxtQkFBcUJ6YyxFQUFFMGMsaUJBT3RIMWMsRUFBRW9jLFFBQVVwYyxFQUFFc2MsZ0JBTm5CRixHQUEyQyxTQUFrQk8sR0FDNUQsSUFBSVAsRUFBVXpiLFNBQVNDLGlCQUFpQitiLEdBQ3BDQyxFQUFLL2MsS0FDVCxPQUFPZ0csTUFBTXJHLFVBQVV1SixLQUFLdkssS0FBSzRkLEVBQVMsU0FBVXBjLEdBQ2xELE9BQU9BLElBQU00YyxLQU5uQixDQVNHdEIsUUFBUTliLFdBSUpxRyxNQUFNMEcsT0FDVDFHLE1BQU0wRyxLQUFPLFNBQVVqTixHQUVyQixTQUFVMEwsTUFBTXhNLEtBQUtjIiwiZmlsZSI6ImRyb3Bkb3duLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMGVjMTZiYWZhMWE1MTE3ZWUxYTMiLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgc3RyVG9FbCwgcnVuQ2FsbGJhY2ssIGhhc0NsYXNzLCBleHRlbmQsIHRyYW5zbGl0IH0gZnJvbSAnLi9saWIvdXRpbHMuanMnO1xuaW1wb3J0ICdwcm9taXNlLXBvbHlmaWxsJztcbmltcG9ydCAnd2hhdHdnLWZldGNoJztcbmltcG9ydCAnLi9saWIvcG9seWZpbGxzLmpzJztcblxuY2xhc3MgRHJvcGRvd24ge1xuICBjb25zdHJ1Y3RvciAoZWxlbWVudCwgdXNlckNvbmZpZyA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnQpO1xuXG4gICAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYERyb3Bkb3duOiDQodC10LvQtdC60YLQvtGAICR7ZWxlbWVudH0g0L3QtSDQvdCw0LnQtNC10L0hYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG5ldyBEcm9wZG93bihlbGVtZW50c1tpXSwgdXNlckNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICAgICAgLy8gQmFzZVxuICAgICAgaXRlbXM6IFtdLFxuICAgICAgc2luZ2xlSXRlbTogZmFsc2UsXG4gICAgICBpbnB1dEhpZGRlbk5hbWU6ICdkcm9wZG93bicsXG5cbiAgICAgIC8vIFNlYXJjaFxuICAgICAgc2VhcmNoRmllbGRzOiBbJ25hbWUnXSxcbiAgICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAn0JLQstC10LTQuNGC0LUg0LjQvNGPINC00YDRg9Cz0LAg0LjQu9C4IGVtYWlsJyxcbiAgICAgIG5vUmVzdWx0c1RleHQ6ICfQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0L3QtSDQvdCw0LnQtNC10L0nLFxuXG4gICAgICAvLyBTZXJ2ZXJcbiAgICAgIHNlcnZlclNlYXJjaDoge1xuICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgIGZpZWxkczogW10sXG4gICAgICAgIHBhcmFtTmFtZVF1ZXJ5OiAncScsXG4gICAgICAgIHBhcmFtTmFtZUZpZWxkczogJ2ZpZWxkcycsXG4gICAgICAgIGxvYWRpbmdUZXh0OiAn0JfQsNCz0YDRg9C30LrQsC4uLidcbiAgICAgIH0sXG5cbiAgICAgIC8vIENTUyBjbGFzc2VzXG4gICAgICBjbGFzc05hbWVzOiB7XG4gICAgICAgIGNvbnRhaW5lcjogJ2Ryb3Bkb3duJyxcbiAgICAgICAgaGVhZDogJ2Ryb3Bkb3duX19oZWFkJyxcbiAgICAgICAgc2VsZWN0ZWRMaXN0OiAnZHJvcGRvd25fX3NlbGVjdGVkJyxcbiAgICAgICAgc2VsZWN0ZWRJdGVtOiAnZHJvcGRvd25fX3MtaXRlbScsXG4gICAgICAgIHJlbW92ZUJ1dHRvbjogJ2Ryb3Bkb3duX19yZW1vdmUtYnRuJyxcbiAgICAgICAgYWRkQnV0dG9uOiAnZHJvcGRvd25fX2FkZC1idXR0b24nLFxuICAgICAgICBpbnB1dDogJ2Ryb3Bkb3duX19pbnB1dCcsXG4gICAgICAgIGFycm93OiAnZHJvcGRvd25fX2Fycm93JyxcbiAgICAgICAgbGlzdDogJ2Ryb3Bkb3duX19saXN0JyxcbiAgICAgICAgbGlzdEFjdGl2ZTogJ2Ryb3Bkb3duX19saXN0X2FjdGl2ZScsXG4gICAgICAgIGxpc3RJdGVtOiAnZHJvcGRvd25fX2l0ZW0nLFxuICAgICAgICBsaXN0SXRlbUhpZ2hsaWdodDogJ2Ryb3Bkb3duX19pdGVtX2hvdmVyJyxcbiAgICAgICAgbWVzc2FnZTogJ2Ryb3Bkb3duX19tZXNzYWdlJ1xuICAgICAgfSxcblxuICAgICAgLy8gUmVuZGVyIGl0ZW1zXG4gICAgICB0ZW1wbGF0ZUxpc3RJdGVtOiBpdGVtID0+IHtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd25fX2l0ZW0taW5uZXJcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZHJvcGRvd25fX2F2YXRhclwiPlxuICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwiZHJvcGRvd25fX2F2YXRhci1pbWdcIiBzcmM9XCIke2l0ZW0uYXZhdGFyfVwiPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRyb3Bkb3duX19uYW1lXCI+JHtpdGVtLm5hbWV9PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgICAgfSxcblxuICAgICAgdGVtcGxhdGVTZWxlY3RlZEl0ZW06IGl0ZW0gPT4ge1xuICAgICAgICByZXR1cm4gaXRlbS5uYW1lO1xuICAgICAgfSxcblxuICAgICAgLy8gQ2FsbGJhY2tzXG4gICAgICBvbkluaXQ6IG51bGwsXG4gICAgICBvbkRlc3Ryb3k6IG51bGwsXG4gICAgICBvblNob3c6IG51bGwsXG4gICAgICBvbkhpZGU6IG51bGwsXG4gICAgICBvblNlbGVjdDogbnVsbCxcbiAgICAgIG9uVW5zZWxlY3Q6IG51bGxcbiAgICB9O1xuXG4gICAgdGhpcy5jb25maWcgPSBleHRlbmQoZGVmYXVsdENvbmZpZywgdXNlckNvbmZpZyk7XG4gICAgdGhpcy5lbGVtZW50ID0gdHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50KSA6IGVsZW1lbnQ7XG4gICAgdGhpcy5lbGVtZW50cyA9IHt9O1xuICAgIHRoaXMuaW5pdGlhbGlzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNlbGVjdGVkID0gW107XG5cbiAgICAvLyBCaW5nXG4gICAgdGhpcy5fb25DbGljayA9IHRoaXMuX29uQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbktleURvd24gPSB0aGlzLl9vbktleURvd24uYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbkZvY3VzID0gdGhpcy5fb25Gb2N1cy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uQ2hhbmdlID0gdGhpcy5fb25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbk1vdXNlT3ZlciA9IHRoaXMuX29uTW91c2VPdmVyLmJpbmQodGhpcyk7XG5cbiAgICAvLyBTdGFydFxuICAgIHRoaXMuaW5pdCh0aGlzLmNvbmZpZy5pbml0KTtcbiAgfVxuXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogICAgICAgICAgICAgICAgICAgICAgKlxuICAgKiAgIFB1YmxpYyBmdW5jdGlvbnMgICAqXG4gICAqICAgICAgICAgICAgICAgICAgICAgICpcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAvKipcbiAgICogSW5pdFxuICAgKiBAcmV0dXJuXG4gICAqIEBwdWJsaWNcbiAgKi9cbiAgaW5pdCAoKSB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbGlzZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9pbml0VGVtcGxhdGVzKCk7XG4gICAgdGhpcy5fY3JlYXRlVGVtcGxhdGVzKCk7XG4gICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgdGhpcy5fcmVuZGVyTGlzdCgpO1xuICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICB0aGlzLmluaXRpYWxpc2VkID0gdHJ1ZTtcblxuICAgIC8vIENhbGxiYWNrXG4gICAgcnVuQ2FsbGJhY2sodGhpcy5jb25maWcub25Jbml0LCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95XG4gICAqIEByZXR1cm5cbiAgICogQHB1YmxpY1xuICAqL1xuICBkZXN0cm95ICgpIHtcbiAgICBpZiAodGhpcy5pbml0aWFsaXNlZCA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5lbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSBbXTtcblxuICAgIHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5pbml0aWFsaXNlZCA9IGZhbHNlO1xuXG4gICAgLy8gQ2FsbGJhY2tcbiAgICBydW5DYWxsYmFjayh0aGlzLmNvbmZpZy5vbkRlc3Ryb3ksIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqINCf0L7QutCw0LfQsNGC0Ywg0YHQv9C40YHQvtC6XG4gICAqIEByZXR1cm5cbiAgICogQHB1YmxpY1xuICAqL1xuICBzaG93TGlzdCAoKSB7XG4gICAgY29uc3QgeyBsaXN0LCBpbnB1dCB9ID0gdGhpcy5lbGVtZW50cztcbiAgICBsaXN0LmNsYXNzTGlzdC5hZGQodGhpcy5jb25maWcuY2xhc3NOYW1lcy5saXN0QWN0aXZlKTtcbiAgICBpbnB1dC5mb2N1cygpO1xuXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWQubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5fc2hvd0lucHV0KCk7XG4gICAgfVxuXG4gICAgLy8gQ2FsbGJhY2tcbiAgICBydW5DYWxsYmFjayh0aGlzLmNvbmZpZy5vblNob3csIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqINCh0LrRgNGL0YLRjCDRgdC/0LjRgdC+0LpcbiAgICogQHJldHVyblxuICAgKiBAcHVibGljXG4gICovXG4gIGhpZGVMaXN0ICgpIHtcbiAgICBjb25zdCB7IGxpc3QgfSA9IHRoaXMuZWxlbWVudHM7XG4gICAgbGlzdC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY29uZmlnLmNsYXNzTmFtZXMubGlzdEFjdGl2ZSk7XG5cbiAgICBpZiAodGhpcy5zZWxlY3RlZC5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXQoKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPXG4gICAgdGhpcy5lbGVtZW50cy5pbnB1dC52YWx1ZSA9ICcnO1xuICAgIHRoaXMuX3JlbmRlckxpc3QoKTtcblxuICAgIC8vIENhbGxiYWNrXG4gICAgcnVuQ2FsbGJhY2sodGhpcy5jb25maWcub25IaWRlLCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQktGL0LHQvtGAINGN0LvQtdC80LXQvdGC0LBcbiAgICogQHJldHVyblxuICAgKiBAcHVibGljXG4gICAqL1xuICBzZWxlY3RJdGVtIChpZCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5faGlkZUlucHV0KCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5zaW5nbGVJdGVtKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkLnB1c2goaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGVkWzBdID0gaWQ7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVuZGVyTGlzdCgpO1xuICAgIHRoaXMuX3JlbmRlclNlbGVjdGVkKCk7XG4gICAgdGhpcy5fdXBkYXRlU3VibWl0SW5wdXQoKTtcblxuICAgIC8vIENhbGxiYWNrXG4gICAgcnVuQ2FsbGJhY2sodGhpcy5jb25maWcub25TZWxlY3QsIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqINCe0YLQvNC10L3QuNGC0Ywg0LLRi9Cx0L7RgFxuICAgKiBAcmV0dXJuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB1bnNlbGVjdEl0ZW0gKGlkKSB7XG4gICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWQuZmlsdGVyKG9iaiA9PiBvYmogIT09IGlkKTtcbiAgICB0aGlzLl9yZW5kZXJMaXN0KCk7XG4gICAgdGhpcy5fcmVuZGVyU2VsZWN0ZWQoKTtcbiAgICB0aGlzLl91cGRhdGVTdWJtaXRJbnB1dCgpO1xuXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLl9zaG93SW5wdXQoKTtcbiAgICB9XG5cbiAgICAvLyBDYWxsYmFja1xuICAgIHJ1bkNhbGxiYWNrKHRoaXMuY29uZmlnLm9uVW5zZWxlY3QsIHRoaXMpO1xuICB9XG5cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogICAgICAgICAgICAgICAgICAgICAgICpcbiAgICogICBQcml2YXRlIGZ1bmN0aW9ucyAgICpcbiAgICogICAgICAgICAgICAgICAgICAgICAgICpcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAvKipcbiAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YjQsNCx0LvQvtC90L7QslxuICAgKiBAcmV0dXJuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdFRlbXBsYXRlcyAoKSB7XG4gICAgY29uc3QgeyBjbGFzc05hbWVzLCBzZWFyY2hQbGFjZWhvbGRlciwgaW5wdXRIaWRkZW5OYW1lLCB0ZW1wbGF0ZUxpc3RJdGVtLCB0ZW1wbGF0ZVNlbGVjdGVkSXRlbSB9ID0gdGhpcy5jb25maWc7XG5cbiAgICBjb25zdCB0ZW1wbGF0ZXMgPSB7XG4gICAgICBjb250YWluZXI6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHN0clRvRWwoYFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCIke2NsYXNzTmFtZXMuY29udGFpbmVyfVwiPjwvZGl2PlxuICAgICAgICBgKTtcbiAgICAgIH0sXG5cbiAgICAgIGhlYWQ6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHN0clRvRWwoYFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCIke2NsYXNzTmFtZXMuaGVhZH1cIj48L2Rpdj5cbiAgICAgICAgYCk7XG4gICAgICB9LFxuXG4gICAgICBsaXN0OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBzdHJUb0VsKGBcbiAgICAgICAgICA8dWwgY2xhc3M9XCIke2NsYXNzTmFtZXMubGlzdH1cIj48L3VsPlxuICAgICAgICBgKTtcbiAgICAgIH0sXG5cbiAgICAgIHNlbGVjdGVkTGlzdDogKCkgPT4ge1xuICAgICAgICByZXR1cm4gc3RyVG9FbChgXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIiR7Y2xhc3NOYW1lcy5zZWxlY3RlZExpc3R9XCI+PC9kaXY+XG4gICAgICAgIGApO1xuICAgICAgfSxcblxuICAgICAgaW5wdXQ6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHN0clRvRWwoYFxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiJHtjbGFzc05hbWVzLmlucHV0fVwiIHBsYWNlaG9sZGVyPVwiJHtzZWFyY2hQbGFjZWhvbGRlcn1cIiAvPlxuICAgICAgICBgKTtcbiAgICAgIH0sXG5cbiAgICAgIGhpZGRlbjogKCkgPT4ge1xuICAgICAgICByZXR1cm4gc3RyVG9FbChgXG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiJHtpbnB1dEhpZGRlbk5hbWV9XCIgLz5cbiAgICAgICAgYCk7XG4gICAgICB9LFxuXG4gICAgICBhcnJvdzogKCkgPT4ge1xuICAgICAgICByZXR1cm4gc3RyVG9FbChgXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCIke2NsYXNzTmFtZXMuYXJyb3d9XCI+PC9zcGFuPlxuICAgICAgICBgKTtcbiAgICAgIH0sXG5cbiAgICAgIGFkZEJ1dHRvbjogKCkgPT4ge1xuICAgICAgICByZXR1cm4gc3RyVG9FbChgXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIiR7Y2xhc3NOYW1lcy5hZGRCdXR0b259XCI+0JTQvtCx0LDQstC40YLRjDwvZGl2PlxuICAgICAgICBgKTtcbiAgICAgIH0sXG5cbiAgICAgIG1lc3NhZ2U6ICh0ZXh0KSA9PiB7XG4gICAgICAgIHJldHVybiBzdHJUb0VsKGA8bGkgY2xhc3M9XCIke2NsYXNzTmFtZXMubWVzc2FnZX1cIj4ke3RleHR9PC9saT5gKTtcbiAgICAgIH0sXG5cbiAgICAgIGxpc3RJdGVtOiAoaXRlbSkgPT4ge1xuICAgICAgICByZXR1cm4gc3RyVG9FbChgXG4gICAgICAgICAgPGxpIGNsYXNzPVwiJHtjbGFzc05hbWVzLmxpc3RJdGVtfVwiIGRhdGEtaWQ9XCIke2l0ZW0uaWR9XCI+XG4gICAgICAgICAgICAke3RlbXBsYXRlTGlzdEl0ZW0oaXRlbSl9XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgYCk7XG4gICAgICB9LFxuXG4gICAgICBzZWxlY3RlZEl0ZW06IChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiBzdHJUb0VsKGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc05hbWVzLnNlbGVjdGVkSXRlbX1cIiBkYXRhLWlkPVwiJHtpdGVtLmlkfVwiPlxuICAgICAgICAgICAgJHt0ZW1wbGF0ZVNlbGVjdGVkSXRlbShpdGVtKX1cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCIke2NsYXNzTmFtZXMucmVtb3ZlQnV0dG9ufVwiPjwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5jb25maWcudGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuICB9XG5cbiAgLyoqXG4gICAqINCf0L7Qu9GD0YfQuNGC0Ywg0YjQsNCx0LvQvtC9INC/0L4g0L3QsNC30LLQsNC90LjRjlxuICAgKiBAcGFyYW0ge1N0cmluZ30g0J3QsNC30LLQsNC90LjQtSDRiNCw0LHQu9C+0L3QsFxuICAgKiBAcGFyYW0gey4uLn0gYXJncyDQkNGA0LPRg9C80LXQvdGC0YtcbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9IEhUTUwg0Y3Qu9C10LzQtdC90YJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRUZW1wbGF0ZSAodGVtcGxhdGUsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB0ZW1wbGF0ZXMgPSB0aGlzLmNvbmZpZy50ZW1wbGF0ZXM7XG4gICAgcmV0dXJuIHRlbXBsYXRlc1t0ZW1wbGF0ZV0oLi4uYXJncyk7XG4gIH1cblxuICAvKipcbiAgICog0KHQvtC30LTQsNC90LjQtSDQsdCw0LfQvtCy0L7QuSDRgNCw0LfQvNC10YLQutC4XG4gICAqIEByZXR1cm5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jcmVhdGVUZW1wbGF0ZXMgKCkge1xuICAgIGNvbnN0IHRlbXBsYXRlcyA9IFsnY29udGFpbmVyJywgJ2hlYWQnLCAnbGlzdCcsICdzZWxlY3RlZExpc3QnLCAnaW5wdXQnLCAnaGlkZGVuJywgJ2Fycm93J107XG5cbiAgICB0ZW1wbGF0ZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHRoaXMuZWxlbWVudHNbaXRlbV0gPSB0aGlzLl9nZXRUZW1wbGF0ZShpdGVtKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQoNC10L3QtNC10YAg0LTRgNC+0L/QtNCw0YPQvdCwXG4gICAqIEByZXR1cm5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgY29udGFpbmVyLCBoZWFkLCBsaXN0LCBzZWxlY3RlZExpc3QsIGlucHV0LCBoaWRkZW4sIGFycm93IH0gPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgaGVhZC5hcHBlbmRDaGlsZChzZWxlY3RlZExpc3QpO1xuICAgIGhlYWQuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgIGhlYWQuYXBwZW5kQ2hpbGQoaGlkZGVuKTtcbiAgICBoZWFkLmFwcGVuZENoaWxkKGFycm93KTtcblxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGlzdCk7XG5cbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQktGL0LLQvtC0INGB0L/QuNGB0LrQsFxuICAgKiBAcmV0dXJuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyTGlzdCAoaXRlbXMgPSB0aGlzLmNvbmZpZy5pdGVtcykge1xuICAgIGNvbnN0IHsgbGlzdCB9ID0gdGhpcy5lbGVtZW50cztcblxuICAgIGxpc3QuaW5uZXJIVE1MID0gJyc7XG5cbiAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQuaW5kZXhPZihpdGVtLmlkKSA+PSAwKSByZXR1cm47XG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoJ2xpc3RJdGVtJywgaXRlbSk7XG4gICAgICBsaXN0LmFwcGVuZChlbGVtZW50KTtcbiAgICB9KTtcblxuICAgIGlmICghbGlzdC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3JlbmRlck1lc3NhZ2UodGhpcy5jb25maWcubm9SZXN1bHRzVGV4dCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqINCS0YvQstC+0LQg0YHQvtC+0LHRidC10L3QuNGPINCyINGB0L/QuNGB0L7QulxuICAgKiBAcmV0dXJuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyTWVzc2FnZSAobWVzc2FnZSwgaXNDbGVhbiA9IHRydWUpIHtcbiAgICBjb25zdCB7IGxpc3QgfSA9IHRoaXMuZWxlbWVudHM7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCdtZXNzYWdlJywgbWVzc2FnZSk7XG5cbiAgICBpZiAoaXNDbGVhbikge1xuICAgICAgbGlzdC5pbm5lckhUTUwgPSAnJztcbiAgICB9XG5cbiAgICBsaXN0LnByZXBlbmQoZWxlbWVudCk7XG4gIH1cblxuICAvKipcbiAgICog0JLRi9Cy0L7QtCDQstGL0LHRgNCw0L3QvdGL0YUg0Y3Qu9C10LzQtdC90YLQvtCyXG4gICAqIEByZXR1cm5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJTZWxlY3RlZCAoKSB7XG4gICAgY29uc3QgeyBzZWxlY3RlZExpc3QgfSA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBzZWxlY3RlZExpc3QuaW5uZXJIVE1MID0gJyc7XG5cbiAgICB0aGlzLnNlbGVjdGVkLmZvckVhY2goaWQgPT4ge1xuICAgICAgY29uc3Qgb2JqID0gdGhpcy5jb25maWcuaXRlbXMuZmlsdGVyKG9iaiA9PiBvYmouaWQgPT09IGlkKVswXTtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgnc2VsZWN0ZWRJdGVtJywgb2JqKTtcbiAgICAgIHNlbGVjdGVkTGlzdC5hcHBlbmQoZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5zZWxlY3RlZC5sZW5ndGggJiYgIXRoaXMuY29uZmlnLnNpbmdsZUl0ZW0pIHtcbiAgICAgIHNlbGVjdGVkTGlzdC5hcHBlbmQodGhpcy5fZ2V0VGVtcGxhdGUoJ2FkZEJ1dHRvbicpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0J3QsNC30L3QsNGH0LjRgtGMINC+0LHRgNCw0LHQvtGC0YfQuNC60Lgg0YHQvtCx0YvRgtC40LlcbiAgICogQHJldHVyblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZEV2ZW50TGlzdGVuZXJzICgpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uQ2xpY2spO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24pO1xuICAgIHRoaXMuZWxlbWVudHMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9vbkZvY3VzKTtcbiAgICB0aGlzLmVsZW1lbnRzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5fb25DaGFuZ2UpO1xuICAgIHRoaXMuZWxlbWVudHMubGlzdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLl9vbk1vdXNlT3Zlcik7XG4gIH1cblxuICAvKipcbiAgICog0KPQtNCw0LvQuNGC0Ywg0L7QsdGA0LDQsdC+0YLRh9C40LrQuCDRgdC+0LHRi9GC0LjQuVxuICAgKiBAcmV0dXJuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25DbGljayk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX29uS2V5RG93bik7XG4gICAgdGhpcy5lbGVtZW50cy5pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX29uRm9jdXMpO1xuICAgIHRoaXMuZWxlbWVudHMuaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9vbkNoYW5nZSk7XG4gICAgdGhpcy5lbGVtZW50cy5saXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMuX29uTW91c2VPdmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQntCx0YDQsNCx0L7RgtGH0LjQutC4INGB0L7QsdGL0YLQuNC5XG4gICAqIEByZXR1cm5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNsaWNrIChlKSB7XG4gICAgY29uc3QgeyBjb250YWluZXIsIGxpc3QgfSA9IHRoaXMuZWxlbWVudHM7XG4gICAgY29uc3QgeyBjbGFzc05hbWVzIH0gPSB0aGlzLmNvbmZpZztcbiAgICBjb25zdCBpc0Ryb3Bkb3duID0gY29udGFpbmVyLmNvbnRhaW5zKGUudGFyZ2V0KTtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGxpc3QuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZXMubGlzdEFjdGl2ZSk7XG5cbiAgICBpZiAoaXNEcm9wZG93bikge1xuICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgbGV0IGl0ZW0gPSB0YXJnZXQuY2xvc2VzdChgLiR7Y2xhc3NOYW1lcy5saXN0SXRlbX1gKTtcblxuICAgICAgLy8gTGlzdCBpdGVtXG4gICAgICBpZiAoaXRlbSkge1xuICAgICAgICBjb25zdCBpZCA9ICtpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpO1xuICAgICAgICB0aGlzLnNlbGVjdEl0ZW0oaWQpO1xuICAgICAgICB0aGlzLmhpZGVMaXN0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFycm93XG4gICAgICBpZiAoaGFzQ2xhc3ModGFyZ2V0LCBjbGFzc05hbWVzLmFycm93KSkge1xuICAgICAgICBpZiAoaGFzQ2xhc3ModGhpcy5lbGVtZW50cy5saXN0LCBjbGFzc05hbWVzLmxpc3RBY3RpdmUpKSB7XG4gICAgICAgICAgdGhpcy5oaWRlTGlzdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmKCFpc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5zaG93TGlzdCgpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5pbnB1dC5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJbnB1dCAvIEhlYWQgLyBTZWxlY3RlZExpc3QgLyBhZGRCdXR0b25cbiAgICAgIGlmIChcbiAgICAgICAgaGFzQ2xhc3ModGFyZ2V0LCBjbGFzc05hbWVzLmlucHV0KSB8fFxuICAgICAgICBoYXNDbGFzcyh0YXJnZXQsIGNsYXNzTmFtZXMuaGVhZCkgfHxcbiAgICAgICAgaGFzQ2xhc3ModGFyZ2V0LCBjbGFzc05hbWVzLnNlbGVjdGVkTGlzdCkgfHxcbiAgICAgICAgaGFzQ2xhc3ModGFyZ2V0LCBjbGFzc05hbWVzLmFkZEJ1dHRvbilcbiAgICAgICkge1xuICAgICAgICBpZighaXNBY3RpdmUpIHtcbiAgICAgICAgICB0aGlzLnNob3dMaXN0KCk7XG4gICAgICAgICAgdGhpcy5lbGVtZW50cy5pbnB1dC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBidXR0b25cbiAgICAgIGlmIChoYXNDbGFzcyh0YXJnZXQsIGNsYXNzTmFtZXMucmVtb3ZlQnV0dG9uKSkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGFyZ2V0LmNsb3Nlc3QoYC4ke2NsYXNzTmFtZXMuc2VsZWN0ZWRJdGVtfWApO1xuICAgICAgICBjb25zdCBpZCA9ICtlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpO1xuICAgICAgICB0aGlzLnVuc2VsZWN0SXRlbShpZCk7XG5cbiAgICAgICAgaWYoaXNBY3RpdmUpIHtcbiAgICAgICAgICB0aGlzLmhpZGVMaXN0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgIHRoaXMuaGlkZUxpc3QoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfb25LZXlEb3duIChlKSB7XG4gICAgY29uc3QgaXNBY3RpdmUgPSB0aGlzLmVsZW1lbnRzLmxpc3QuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuY29uZmlnLmNsYXNzTmFtZXMubGlzdEFjdGl2ZSk7XG5cbiAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb25FbnRlciA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGxpc3QgPSB0aGlzLmVsZW1lbnRzLmxpc3QuY2hpbGRyZW47XG4gICAgICBbLi4ubGlzdF0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgaWYgKGl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuY29uZmlnLmNsYXNzTmFtZXMubGlzdEl0ZW1IaWdobGlnaHQpKSB7XG4gICAgICAgICAgY29uc3QgaWQgPSAraXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcbiAgICAgICAgICB0aGlzLnNlbGVjdEl0ZW0oaWQpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGVMaXN0KCk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmlucHV0LmJsdXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBvbkFycm93S2V5ID0gZGlyZWN0aW9uID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgY29uc3QgbGlzdCA9IHRoaXMuZWxlbWVudHMubGlzdC5jaGlsZHJlbjtcbiAgICAgIGNvbnN0IGRpciA9IChkaXJlY3Rpb24gPT09ICdkb3duJyA/IDEgOiAtMSk7XG5cbiAgICAgIGxldCBhY3RpdmVJdGVtO1xuXG4gICAgICBbLi4ubGlzdF0uZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5jbGFzc0xpc3QuY29udGFpbnModGhpcy5jb25maWcuY2xhc3NOYW1lcy5saXN0SXRlbUhpZ2hsaWdodCkpIHtcbiAgICAgICAgICB0aGlzLl91bmhpZ2hsaWdodEVsZW1lbnQoaXRlbSk7XG5cbiAgICAgICAgICBpZiAobGlzdFtpICsgZGlyXSkge1xuICAgICAgICAgICAgYWN0aXZlSXRlbSA9IGxpc3RbaSArIGRpcl07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjdGl2ZUl0ZW0gPSBsaXN0W2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghYWN0aXZlSXRlbSkge1xuICAgICAgICBhY3RpdmVJdGVtID0gbGlzdFswXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faGlnaGxpZ2h0RWxlbWVudChhY3RpdmVJdGVtKTtcbiAgICAgIHRoaXMuX3Njcm9sbFRvRWxlbShhY3RpdmVJdGVtLCBkaXIpO1xuICAgIH07XG5cbiAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgY2FzZSAyNzogLy8gZXNjXG4gICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgIHRoaXMuaGlkZUxpc3QoKTtcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzLmlucHV0LmJsdXIoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgOTogLy8gdGFiXG4gICAgICAgIHRoaXMuaGlkZUxpc3QoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM4OiAvLyB1cFxuICAgICAgICBvbkFycm93S2V5KCd1cCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDA6IC8vIGRvd25cbiAgICAgICAgb25BcnJvd0tleSgnZG93bicpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTM6IC8vIGVudGVyXG4gICAgICAgIG9uRW50ZXIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgX29uRm9jdXMgKGUpIHtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHRoaXMuZWxlbWVudHMubGlzdC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5jb25maWcuY2xhc3NOYW1lcy5saXN0QWN0aXZlKTtcblxuICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgIHRoaXMuc2hvd0xpc3QoKTtcbiAgICB9XG4gIH1cblxuICBfb25DaGFuZ2UgKGUpIHtcbiAgICB0aGlzLl9zZWFyY2hJdGVtcyhlLnRhcmdldC52YWx1ZSk7XG4gIH1cblxuICBfb25Nb3VzZU92ZXIgKGUpIHtcbiAgICBjb25zdCBpdGVtID0gZS50YXJnZXQuY2xvc2VzdChgLiR7dGhpcy5jb25maWcuY2xhc3NOYW1lcy5saXN0SXRlbX1gKTtcbiAgICB0aGlzLl91bmhpZ2hsaWdodEFsbCgpO1xuXG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHRoaXMuX2hpZ2hsaWdodEVsZW1lbnQoaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqINCf0L7QuNGB0Log0Y3Qu9C10LzQtdC90YLQvtCyINGB0L/QuNGB0LrQsFxuICAgKiBAcmV0dXJuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VhcmNoSXRlbXMgKGlucHV0KSB7XG4gICAgaWYgKGlucHV0ID09PSAnJykge1xuICAgICAgdGhpcy5fcmVuZGVyTGlzdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vINCc0LDRgdGB0LjQsiDQstCw0YDQuNCw0L3RgtC+0LJcbiAgICBjb25zdCB2YXJpYW50cyA9IHRyYW5zbGl0KGlucHV0KTtcbiAgICBpbnB1dCA9IGlucHV0LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBDbGllbnQtc2lkZVxuICAgIGxldCByZXN1bHQgPSB0aGlzLmNvbmZpZy5pdGVtcy5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jb25maWcuc2VhcmNoRmllbGRzLnNvbWUoZmllbGQgPT4ge1xuICAgICAgICBmaWVsZCA9IGl0ZW1bZmllbGRdO1xuXG4gICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgIGZpZWxkID0gZmllbGQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBjb25zdCBwYXJ0RmllbGQgPSBmaWVsZC5zcGxpdCgnICcpO1xuICAgICAgICAgIHBhcnRGaWVsZC5wdXNoKGZpZWxkKTtcblxuICAgICAgICAgIHJldHVybiBwYXJ0RmllbGQuc29tZShpdGVtID0+IHtcbiAgICAgICAgICAgIHJldHVybiB2YXJpYW50cy5zb21lKHN0ciA9PiAhaXRlbS5pbmRleE9mKHN0cikpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3JlbmRlckxpc3QocmVzdWx0KTtcblxuICAgIC8vIFNlcnZlci1zaWRlXG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWcuc2VydmVyU2VhcmNoLnVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fc2VhcmNoU2VydmVyKHZhcmlhbnRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0J/QvtC40YHQuiDQvdCwINGB0YLQvtGA0L7QvdC1INGB0LXRgNCy0LXRgNCwXG4gICAqIEByZXR1cm5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZWFyY2hTZXJ2ZXIgKHZhcmlhbnRzKSB7XG4gICAgY29uc3QgeyB1cmwsIGZpZWxkcywgcGFyYW1OYW1lUXVlcnksIHBhcmFtTmFtZUZpZWxkcywgbG9hZGluZ1RleHQgfSA9IHRoaXMuY29uZmlnLnNlcnZlclNlYXJjaDtcbiAgICB0aGlzLl9yZW5kZXJNZXNzYWdlKGxvYWRpbmdUZXh0KTtcblxuICAgIGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIFtwYXJhbU5hbWVRdWVyeV06IHZhcmlhbnRzLFxuICAgICAgICBbcGFyYW1OYW1lRmllbGRzXTogZmllbGRzXG4gICAgICB9KVxuICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICB9KS50aGVuKGl0ZW1zID0+IHtcbiAgICAgIGlmIChpdGVtcykge1xuICAgICAgICB0aGlzLl9yZW5kZXJMaXN0KGl0ZW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C+0LrQsNC30LDRgtGMINC/0L7Qu9C1INCy0LLQvtC00LBcbiAgICogQHJldHVyblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Nob3dJbnB1dCAoKSB7XG4gICAgdGhpcy5lbGVtZW50cy5pbnB1dC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgfVxuXG4gIC8qKlxuICAgKiDQodC60YDRi9GC0Ywg0L/QvtC70LUg0LLQstC+0LTQsFxuICAgKiBAcmV0dXJuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGlkZUlucHV0ICgpIHtcbiAgICB0aGlzLmVsZW1lbnRzLmlucHV0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICAvKipcbiAgICog0J7QsdC90L7QstC40YLRjCBpbnB1dFt0eXBlPVwiaGlkZGVuXCJdXG4gICAqIEByZXR1cm5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGVTdWJtaXRJbnB1dCAoKSB7XG4gICAgdGhpcy5lbGVtZW50cy5oaWRkZW4udmFsdWUgPSB0aGlzLnNlbGVjdGVkLmpvaW4oJywnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C+0LTRgdCy0LXRgtC60LAg0LDQutCw0YLQuNCy0L3QvtCz0L4g0Y3Qu9C10LzQtdC90YLQsFxuICAgKiBAcmV0dXJuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGlnaGxpZ2h0RWxlbWVudCAoaXRlbSkge1xuICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCh0aGlzLmNvbmZpZy5jbGFzc05hbWVzLmxpc3RJdGVtSGlnaGxpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQo9C00LDQu9C40YLRjCDQv9C+0LTRgdCy0LXRgtC60YNcbiAgICogQHJldHVyblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VuaGlnaGxpZ2h0RWxlbWVudCAoaXRlbSkge1xuICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNvbmZpZy5jbGFzc05hbWVzLmxpc3RJdGVtSGlnaGxpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQo9C00LDQu9C40YLRjCDQv9C+0LTRgdCy0LXRgtC60YMg0YMg0LLRgdC10YUg0Y3Qu9C10LzQtdC90YLQvtCyXG4gICAqIEByZXR1cm5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91bmhpZ2hsaWdodEFsbCAoKSB7XG4gICAgY29uc3QgbGlzdCA9IHRoaXMuZWxlbWVudHMubGlzdC5jaGlsZHJlbjtcblxuICAgIFsuLi5saXN0XS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKGl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuY29uZmlnLmNsYXNzTmFtZXMubGlzdEl0ZW1IaWdobGlnaHQpKSB7XG4gICAgICAgIHRoaXMuX3VuaGlnaGxpZ2h0RWxlbWVudChpdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9GA0L7QutGA0YPRgtC60LAg0Log0Y3Qu9C10LzQtdC90YLRg1xuICAgKiBAcmV0dXJuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2Nyb2xsVG9FbGVtIChlbGVtZW50LCBkaXIpIHtcbiAgICBjb25zdCB7IGxpc3QgfSA9IHRoaXMuZWxlbWVudHM7XG4gICAgY29uc3QgaXRlbVRvcCA9IGVsZW1lbnQub2Zmc2V0VG9wO1xuICAgIGNvbnN0IGl0ZW1Cb3R0b20gPSBlbGVtZW50Lm9mZnNldFRvcCArIGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IHRoaXMuZWxlbWVudHMubGlzdC5zY3JvbGxUb3A7XG4gICAgY29uc3QgbGlzdEhlaWdodCA9IHRoaXMuZWxlbWVudHMubGlzdC5vZmZzZXRIZWlnaHQ7XG5cbiAgICBpZiAoZGlyID4gMCAmJiBpdGVtQm90dG9tID4gbGlzdEhlaWdodCkge1xuICAgICAgbGlzdC5zY3JvbGxUb3AgPSBpdGVtQm90dG9tIC0gbGlzdEhlaWdodDtcbiAgICB9IGVsc2UgaWYgKGRpciA8IDAgJiYgKGxpc3RIZWlnaHQgKyBpdGVtVG9wIDwgbGlzdEhlaWdodCArIHNjcm9sbFRvcCkpIHtcbiAgICAgIGxpc3Quc2Nyb2xsVG9wID0gaXRlbVRvcDtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEcm9wZG93bjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zY3JpcHRzL2Ryb3Bkb3duLmpzIiwiLyoqXG4gKiDQn9C+0LvRg9GH0LDQtdGCINGC0LjQvyDQvtCx0YrQtdC60YLQsFxuICogQHBhcmFtIHtPYmplY3R9IG9iaiDQntCx0YrQtdC60YIsINC00LvRjyDQutC+0YLQvtGA0L7Qs9C+INC90YPQttC90L4g0L/QvtC70YPRh9C40YLRjCDRgtC40L9cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFR5cGUgPSBvYmogPT4ge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG4vKipcbiAqINCf0YDQvtCy0LXRgNGP0LXRgiwg0YHQvtC+0YLQstC10YLRgdGC0LLRg9C10YIg0LvQuCDQvtCx0YrQtdC60YIg0LfQsNC00LDQvdC90L7QvNGDINGC0LjQv9GDXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHQg0J/RgNC+0LLQtdGA0Y/QtdC80YvQuSDRgtC40L9cbiAqIEBwYXJhbSAge09iamVjdH0gb2JqINCm0LXQu9C10LLQvtC5INC+0LHRitC10LrRglxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzVHlwZSA9ICh0LCBvYmopID0+IHtcbiAgY29uc3QgdHlwZSA9IGdldFR5cGUob2JqKTtcbiAgcmV0dXJuIG9iaiAhPT0gdW5kZWZpbmVkICYmIG9iaiAhPT0gbnVsbCAmJiB0eXBlID09PSB0LnRvTG93ZXJDYXNlKCk7XG59O1xuXG4vKipcbiAqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCIEhNVEwg0Y3Qu9C10LzQtdC90YIg0LjQtyDRgdGC0YDQvtC60LhcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICovXG5leHBvcnQgY29uc3Qgc3RyVG9FbCA9IHN0ciA9PiB7XG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gc3RyLnRyaW0oKTtcbiAgcmV0dXJuIGRpdi5maXJzdENoaWxkO1xufTtcblxuLyoqXG4gKiDQl9Cw0L/Rg9GB0LogY2FsbGJhY2sg0YTRg9C90LrRhtC40LhcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICogQHJldHVyblxuICovXG5leHBvcnQgY29uc3QgcnVuQ2FsbGJhY2sgPSAoZm4sIGNvbnRleHQpID0+IHtcbiAgaWYgKGlzVHlwZSgnZnVuY3Rpb24nLCBmbikpIHtcbiAgICBmbi5jYWxsKGNvbnRleHQpO1xuICB9XG59O1xuXG4vKipcbiAqINCf0YDQvtCy0LXRgNGP0LXRgiwg0LXRgdGC0Ywg0LvQuCDQtNCw0L3QvdGL0Lkg0LrQu9Cw0YHRgSDRgyDRjdC70LXQvNC10L3RgtCwXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gSFRNTCDRjdC70LXQvNC10L3RgtCwINC90LAg0LrQvtGC0L7RgNC+0Lwg0L/RgNC+0LLQtdGA0Y/QtdC8INC60LvQsNGB0YFcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUg0JjRgdC60L7QvNGL0LkgQ1NTINC60LvQsNGB0YFcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgaGFzQ2xhc3MgPSAoZWwsIGNsYXNzTmFtZSkgPT4ge1xuICBpZiAodHlwZW9mIGVsICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgY2xhc3NOYW1lICE9PSAnc3RyaW5nJykgcmV0dXJuO1xuICByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG59O1xuXG4vKipcbiAqINCh0LvQuNGP0L3QuNC1INC+0LHRitC10LrRgtC+0LJcbiAqIEBwYXJhbSB7T2JqZWN0c31cbiAqIEByZXR1cm4ge09iamVjdH0g0J3QvtCy0YvQuSDQvtCx0YrQtdC60YJcbiAqL1xuZXhwb3J0IGNvbnN0IGV4dGVuZCA9ICguLi5hcmdzKSA9PiB7XG4gIGxldCBleHRlbmRlZCA9IHt9O1xuXG4gIGxldCBtZXJnZSA9IG9iaiA9PiB7XG4gICAgZm9yIChsZXQgcHJvcCBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkge1xuICAgICAgICBpZiAoaXNUeXBlKCdPYmplY3QnLCBvYmpbcHJvcF0pKSB7XG4gICAgICAgICAgZXh0ZW5kZWRbcHJvcF0gPSBleHRlbmQodHJ1ZSwgZXh0ZW5kZWRbcHJvcF0sIG9ialtwcm9wXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXh0ZW5kZWRbcHJvcF0gPSBvYmpbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgYXJncy5mb3JFYWNoKG9iaiA9PiB7XG4gICAgaWYgKGlzVHlwZSgnT2JqZWN0Jywgb2JqKSkge1xuICAgICAgbWVyZ2Uob2JqKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBleHRlbmRlZDtcbn07XG5cbi8qKlxuICog0JLQvtC30LLRgNCw0YnQsNC10YIg0LzQsNGB0YHQuNCyINCy0LDRgNC40LDQvdGC0L7QsiDQuNC90YLQtdGA0L/RgNC10YLQsNGG0LjQuCDRgdGC0YDQvtC60LhcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30g0JjRgdGF0L7QtNC90LDRjyDRgdGC0YDQvtC60LBcbiAqIEByZXR1cm5zIHtBcnJheX0g0JzQsNGB0YHQuNCyINCy0LDRgNC40LDQvdGC0L7QslxuICovXG5leHBvcnQgY29uc3QgdHJhbnNsaXQgPSB0ZXh0ID0+IHtcbiAgY29uc3QgYWxwaGFiZXQgPSB7XG4gICAgcnU6ICfRiSAgINGIICDRhyAg0YYgINGOICDRjyAg0ZEgINC2ICDRiiAg0YsgINGNICDQsCDQsSDQsiDQsyDQtCDQtSDQtyDQuCDQuSDQuiDQuyDQvCDQvSDQviDQvyDRgCDRgSDRgiDRgyDRhCDRhSDRjCcuc3BsaXQoLyArL2cpLFxuICAgIGVuOiBcInNoaCBzaCBjaCBjeiB5dSB5YSB5byB6aCBgYCB5JyBlYCBhIGIgdiBnIGQgZSB6IGkgaiBrIGwgbSBuIG8gcCByIHMgdCB1IGYgeCBgXCIuc3BsaXQoLyArL2cpLFxuICAgIHJ1QmFkOiBcIm8gaSB4IHcgLiB6IFxcXFwgOyBdIHMgJyBmICwgZCB1IGwgdCBwIGIgcSByIGsgdiB5IGogZyBoIGMgbiBlIGEgWyBtXCIuc3BsaXQoLyArL2cpXG4gIH07XG5cbiAgY29uc3QgdHJhbnNmb3JtcyA9IFtcbiAgICBbJ3J1JywgJ2VuJ10sXG4gICAgWydlbicsICdydSddLFxuICAgIFsncnVCYWQnLCAncnUnXSxcbiAgICBbJ3J1JywgJ3J1QmFkJ10sXG4gICAgWydydScsICdydUJhZCcsICdlbicsICdydSddLFxuICAgIFsncnVCYWQnLCAncnUnLCAncnUnLCAnZW4nXVxuICBdO1xuXG4gIGNvbnN0IHJlbHVsdHMgPSBbXTtcbiAgdGV4dCA9IHRleHQudG9Mb3dlckNhc2UoKTtcblxuICB0cmFuc2Zvcm1zLmZvckVhY2godmFyaWFudCA9PiB7XG4gICAgbGV0IHJlcyA9IHRleHQ7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhcmlhbnQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIGNvbnN0IGZyb20gPSBhbHBoYWJldFt2YXJpYW50W2ldXSxcbiAgICAgICAgdG8gPSBhbHBoYWJldFt2YXJpYW50W2kgKyAxXV07XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBhbHBoYWJldC5ydS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICByZXMgPSByZXMuc3BsaXQoZnJvbVtpXSkuam9pbih0b1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVsdWx0cy5wdXNoKHJlcyk7XG4gIH0pO1xuXG4gIHJldHVybiByZWx1bHRzO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zY3JpcHRzL2xpYi91dGlscy5qcyIsIid1c2Ugc3RyaWN0JztcblxuLy8gU3RvcmUgc2V0VGltZW91dCByZWZlcmVuY2Ugc28gcHJvbWlzZS1wb2x5ZmlsbCB3aWxsIGJlIHVuYWZmZWN0ZWQgYnlcbi8vIG90aGVyIGNvZGUgbW9kaWZ5aW5nIHNldFRpbWVvdXQgKGxpa2Ugc2lub24udXNlRmFrZVRpbWVycygpKVxudmFyIHNldFRpbWVvdXRGdW5jID0gc2V0VGltZW91dDtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8vIFBvbHlmaWxsIGZvciBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvbWlzZShmbikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSkpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZXMgbXVzdCBiZSBjb25zdHJ1Y3RlZCB2aWEgbmV3Jyk7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vdCBhIGZ1bmN0aW9uJyk7XG4gIHRoaXMuX3N0YXRlID0gMDtcbiAgdGhpcy5faGFuZGxlZCA9IGZhbHNlO1xuICB0aGlzLl92YWx1ZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fZGVmZXJyZWRzID0gW107XG5cbiAgZG9SZXNvbHZlKGZuLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlKHNlbGYsIGRlZmVycmVkKSB7XG4gIHdoaWxlIChzZWxmLl9zdGF0ZSA9PT0gMykge1xuICAgIHNlbGYgPSBzZWxmLl92YWx1ZTtcbiAgfVxuICBpZiAoc2VsZi5fc3RhdGUgPT09IDApIHtcbiAgICBzZWxmLl9kZWZlcnJlZHMucHVzaChkZWZlcnJlZCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHNlbGYuX2hhbmRsZWQgPSB0cnVlO1xuICBQcm9taXNlLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpIHtcbiAgICB2YXIgY2IgPSBzZWxmLl9zdGF0ZSA9PT0gMSA/IGRlZmVycmVkLm9uRnVsZmlsbGVkIDogZGVmZXJyZWQub25SZWplY3RlZDtcbiAgICBpZiAoY2IgPT09IG51bGwpIHtcbiAgICAgIChzZWxmLl9zdGF0ZSA9PT0gMSA/IHJlc29sdmUgOiByZWplY3QpKGRlZmVycmVkLnByb21pc2UsIHNlbGYuX3ZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJldDtcbiAgICB0cnkge1xuICAgICAgcmV0ID0gY2Ioc2VsZi5fdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJlamVjdChkZWZlcnJlZC5wcm9taXNlLCBlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVzb2x2ZShkZWZlcnJlZC5wcm9taXNlLCByZXQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZShzZWxmLCBuZXdWYWx1ZSkge1xuICB0cnkge1xuICAgIC8vIFByb21pc2UgUmVzb2x1dGlvbiBQcm9jZWR1cmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9taXNlcy1hcGx1cy9wcm9taXNlcy1zcGVjI3RoZS1wcm9taXNlLXJlc29sdXRpb24tcHJvY2VkdXJlXG4gICAgaWYgKG5ld1ZhbHVlID09PSBzZWxmKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi4nKTtcbiAgICBpZiAoXG4gICAgICBuZXdWYWx1ZSAmJlxuICAgICAgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG5ld1ZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICkge1xuICAgICAgdmFyIHRoZW4gPSBuZXdWYWx1ZS50aGVuO1xuICAgICAgaWYgKG5ld1ZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBzZWxmLl9zdGF0ZSA9IDM7XG4gICAgICAgIHNlbGYuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIGZpbmFsZShzZWxmKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkb1Jlc29sdmUoYmluZCh0aGVuLCBuZXdWYWx1ZSksIHNlbGYpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHNlbGYuX3N0YXRlID0gMTtcbiAgICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIGZpbmFsZShzZWxmKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlamVjdChzZWxmLCBlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWplY3Qoc2VsZiwgbmV3VmFsdWUpIHtcbiAgc2VsZi5fc3RhdGUgPSAyO1xuICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICBmaW5hbGUoc2VsZik7XG59XG5cbmZ1bmN0aW9uIGZpbmFsZShzZWxmKSB7XG4gIGlmIChzZWxmLl9zdGF0ZSA9PT0gMiAmJiBzZWxmLl9kZWZlcnJlZHMubGVuZ3RoID09PSAwKSB7XG4gICAgUHJvbWlzZS5faW1tZWRpYXRlRm4oZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXNlbGYuX2hhbmRsZWQpIHtcbiAgICAgICAgUHJvbWlzZS5fdW5oYW5kbGVkUmVqZWN0aW9uRm4oc2VsZi5fdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNlbGYuX2RlZmVycmVkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGhhbmRsZShzZWxmLCBzZWxmLl9kZWZlcnJlZHNbaV0pO1xuICB9XG4gIHNlbGYuX2RlZmVycmVkcyA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIEhhbmRsZXIob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb21pc2UpIHtcbiAgdGhpcy5vbkZ1bGZpbGxlZCA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogbnVsbDtcbiAgdGhpcy5vblJlamVjdGVkID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT09ICdmdW5jdGlvbicgPyBvblJlamVjdGVkIDogbnVsbDtcbiAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbn1cblxuLyoqXG4gKiBUYWtlIGEgcG90ZW50aWFsbHkgbWlzYmVoYXZpbmcgcmVzb2x2ZXIgZnVuY3Rpb24gYW5kIG1ha2Ugc3VyZVxuICogb25GdWxmaWxsZWQgYW5kIG9uUmVqZWN0ZWQgYXJlIG9ubHkgY2FsbGVkIG9uY2UuXG4gKlxuICogTWFrZXMgbm8gZ3VhcmFudGVlcyBhYm91dCBhc3luY2hyb255LlxuICovXG5mdW5jdGlvbiBkb1Jlc29sdmUoZm4sIHNlbGYpIHtcbiAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBmbihcbiAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICByZXNvbHZlKHNlbGYsIHZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIHJlamVjdChzZWxmLCByZWFzb24pO1xuICAgICAgfVxuICAgICk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICByZWplY3Qoc2VsZiwgZXgpO1xuICB9XG59XG5cblByb21pc2UucHJvdG90eXBlWydjYXRjaCddID0gZnVuY3Rpb24ob25SZWplY3RlZCkge1xuICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0ZWQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIHZhciBwcm9tID0gbmV3IHRoaXMuY29uc3RydWN0b3Iobm9vcCk7XG5cbiAgaGFuZGxlKHRoaXMsIG5ldyBIYW5kbGVyKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9tKSk7XG4gIHJldHVybiBwcm9tO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBjb25zdHJ1Y3RvciA9IHRoaXMuY29uc3RydWN0b3I7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY29uc3RydWN0b3IucmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG59O1xuXG5Qcm9taXNlLmFsbCA9IGZ1bmN0aW9uKGFycikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKCFhcnIgfHwgdHlwZW9mIGFyci5sZW5ndGggPT09ICd1bmRlZmluZWQnKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZS5hbGwgYWNjZXB0cyBhbiBhcnJheScpO1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKTtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiByZXNvbHZlKFtdKTtcbiAgICB2YXIgcmVtYWluaW5nID0gYXJncy5sZW5ndGg7XG5cbiAgICBmdW5jdGlvbiByZXMoaSwgdmFsKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodmFsICYmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgIHZhciB0aGVuID0gdmFsLnRoZW47XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwoXG4gICAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgICAgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgcmVzKGksIHZhbCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJlamVjdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXJnc1tpXSA9IHZhbDtcbiAgICAgICAgaWYgKC0tcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgcmVzb2x2ZShhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgcmVqZWN0KGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlcyhpLCBhcmdzW2ldKTtcbiAgICB9XG4gIH0pO1xufTtcblxuUHJvbWlzZS5yZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IFByb21pc2UpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9KTtcbn07XG5cblByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlamVjdCh2YWx1ZSk7XG4gIH0pO1xufTtcblxuUHJvbWlzZS5yYWNlID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsdWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YWx1ZXNbaV0udGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vLyBVc2UgcG9seWZpbGwgZm9yIHNldEltbWVkaWF0ZSBmb3IgcGVyZm9ybWFuY2UgZ2FpbnNcblByb21pc2UuX2ltbWVkaWF0ZUZuID1cbiAgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicgJiZcbiAgICBmdW5jdGlvbihmbikge1xuICAgICAgc2V0SW1tZWRpYXRlKGZuKTtcbiAgICB9KSB8fFxuICBmdW5jdGlvbihmbikge1xuICAgIHNldFRpbWVvdXRGdW5jKGZuLCAwKTtcbiAgfTtcblxuUHJvbWlzZS5fdW5oYW5kbGVkUmVqZWN0aW9uRm4gPSBmdW5jdGlvbiBfdW5oYW5kbGVkUmVqZWN0aW9uRm4oZXJyKSB7XG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZSkge1xuICAgIGNvbnNvbGUud2FybignUG9zc2libGUgVW5oYW5kbGVkIFByb21pc2UgUmVqZWN0aW9uOicsIGVycik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wcm9taXNlLXBvbHlmaWxsL2xpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIihmdW5jdGlvbihzZWxmKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoc2VsZi5mZXRjaCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN1cHBvcnQgPSB7XG4gICAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICAgIGJsb2I6ICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmICdCbG9iJyBpbiBzZWxmICYmIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgICBdXG5cbiAgICB2YXIgaXNEYXRhVmlldyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG4gICAgfVxuXG4gICAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID0gQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICAgIH1cbiAgICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5cXF5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbiAgZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlcmF0b3JcbiAgfVxuXG4gIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMubWFwID0ge31cblxuICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgICAgfSwgdGhpcylcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gICAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlKycsJyt2YWx1ZSA6IHZhbHVlXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKG5hbWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHsgaXRlbXMucHVzaCh2YWx1ZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICAgIH1cbiAgICByZXR1cm4gY2hhcnMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICAgIGlmIChidWYuc2xpY2UpIHtcbiAgICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIEJvZHlJbml0IHR5cGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICAgIHJldHVybiAobWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEpID8gdXBjYXNlZCA6IG1ldGhvZFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gICAgfVxuXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnb21pdCdcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gICAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSlcbiAgfVxuXG4gIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHsgYm9keTogdGhpcy5fYm9keUluaXQgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICAgIGJvZHkudHJpbSgpLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZm9ybVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICAgIHByZVByb2Nlc3NlZEhlYWRlcnMuc3BsaXQoL1xccj9cXG4vKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBoZWFkZXJzXG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbiAgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fVxuICAgIH1cblxuICAgIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICAgIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzXG4gICAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICAgIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJ1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gICAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG4gIH1cblxuICBCb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG4gIFJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgICAgdXJsOiB0aGlzLnVybFxuICAgIH0pXG4gIH1cblxuICBSZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gICAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxuXG4gIHZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG4gIFJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG4gIH1cblxuICBzZWxmLkhlYWRlcnMgPSBIZWFkZXJzXG4gIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3RcbiAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlXG5cbiAgc2VsZi5mZXRjaCA9IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJylcbiAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXG4gICAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG5cbiAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gICAgfSlcbiAgfVxuICBzZWxmLmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2pzZXJ6L2pzX3BpZWNlL2Jsb2IvbWFzdGVyL0RPTS9QYXJlbnROb2RlL2FwcGVuZCgpL2FwcGVuZCgpLm1kXG4oZnVuY3Rpb24gKGFycikge1xuICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdhcHBlbmQnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaXRlbSwgJ2FwcGVuZCcsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmQgKCkge1xuICAgICAgICB2YXIgYXJnQXJyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgICBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgICAgIGFyZ0Fyci5mb3JFYWNoKGZ1bmN0aW9uIChhcmdJdGVtKSB7XG4gICAgICAgICAgdmFyIGlzTm9kZSA9IGFyZ0l0ZW0gaW5zdGFuY2VvZiBOb2RlO1xuICAgICAgICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQoaXNOb2RlID8gYXJnSXRlbSA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhhcmdJdGVtKSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGRvY0ZyYWcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pKFtFbGVtZW50LnByb3RvdHlwZSwgRG9jdW1lbnQucHJvdG90eXBlLCBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZV0pO1xuXG4vLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9qc2Vyei9qc19waWVjZS9ibG9iL21hc3Rlci9ET00vUGFyZW50Tm9kZS9wcmVwZW5kKCkvcHJlcGVuZCgpLm1kXG4oZnVuY3Rpb24gKGFycikge1xuICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdwcmVwZW5kJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0ZW0sICdwcmVwZW5kJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBlbmQgKCkge1xuICAgICAgICB2YXIgYXJnQXJyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgICBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgICAgIGFyZ0Fyci5mb3JFYWNoKGZ1bmN0aW9uIChhcmdJdGVtKSB7XG4gICAgICAgICAgdmFyIGlzTm9kZSA9IGFyZ0l0ZW0gaW5zdGFuY2VvZiBOb2RlO1xuICAgICAgICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQoaXNOb2RlID8gYXJnSXRlbSA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhhcmdJdGVtKSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluc2VydEJlZm9yZShkb2NGcmFnLCB0aGlzLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pKFtFbGVtZW50LnByb3RvdHlwZSwgRG9jdW1lbnQucHJvdG90eXBlLCBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZV0pO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9ydS9kb2NzL1dlYi9BUEkvRWxlbWVudC9jbG9zZXN0IyVEMCU5RiVEMCVCRSVEMCVCQiVEMCVCOCVEMSU4NCVEMCVCOCVEMCVCQiVEMCVCQl8xXyglRDElODAlRDAlQjUlRDAlQkElRDElODMlRDElODAlRDElODElRDAlQjglRDAlQjIlRDAlQkQlRDElOEIlRDAlQjlfJUQwJUJDJUQwJUI1JUQxJTgyJUQwJUJFJUQwJUI0KVxuKGZ1bmN0aW9uIChlKSB7XG4gIGUuY2xvc2VzdCA9IGUuY2xvc2VzdCB8fCBmdW5jdGlvbiAoY3NzKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzO1xuXG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLm1hdGNoZXMoY3NzKSkgcmV0dXJuIG5vZGU7XG4gICAgICBlbHNlIG5vZGUgPSBub2RlLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xufSkoRWxlbWVudC5wcm90b3R5cGUpO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9ydS9kb2NzL1dlYi9BUEkvRWxlbWVudC9tYXRjaGVzXG4oZnVuY3Rpb24gKGUpIHtcbiAgdmFyIG1hdGNoZXMgPSBlLm1hdGNoZXMgfHwgZS5tYXRjaGVzU2VsZWN0b3IgfHwgZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZS5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZS5tc01hdGNoZXNTZWxlY3RvciB8fCBlLm9NYXRjaGVzU2VsZWN0b3I7XG4gICFtYXRjaGVzID8gKGUubWF0Y2hlcyA9IGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24gbWF0Y2hlcyAoc2VsZWN0b3IpIHtcbiAgICB2YXIgbWF0Y2hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIHZhciB0aCA9IHRoaXM7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwobWF0Y2hlcywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlID09PSB0aDtcbiAgICB9KTtcbiAgfSkgOiAoZS5tYXRjaGVzID0gZS5tYXRjaGVzU2VsZWN0b3IgPSBtYXRjaGVzKTtcbn0pKEVsZW1lbnQucHJvdG90eXBlKTtcblxuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vYnJldHR6OS80MjEyMjYyXG4oZnVuY3Rpb24gKCkge1xuICBpZiAoIUFycmF5LmZyb20pIHtcbiAgICBBcnJheS5mcm9tID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwob2JqZWN0KTtcbiAgICB9O1xuICB9XG59KSgpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NjcmlwdHMvbGliL3BvbHlmaWxscy5qcyJdLCJzb3VyY2VSb290IjoiIn0=